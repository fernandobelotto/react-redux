(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{147:function(e,a,t){"use strict";t.d(a,"a",(function(){return d})),t.d(a,"b",(function(){return u}));var o=t(0),n=t.n(o);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,o,n=function(e,a){if(null==e)return{};var t,o,n={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=n.a.createContext({}),p=function(e){var a=n.a.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):c(c({},a),e)),t},d=function(e){var a=p(e.components);return n.a.createElement(l.Provider,{value:a},e.children)},b={inlineCode:"code",wrapper:function(e){var a=e.children;return n.a.createElement(n.a.Fragment,{},a)}},m=n.a.forwardRef((function(e,a){var t=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,u=d["".concat(i,".").concat(m)]||d[m]||b[m]||r;return t?n.a.createElement(u,c(c({ref:a},l),{},{components:t})):n.a.createElement(u,c({ref:a},l))}));function u(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=m;var c={};for(var s in a)hasOwnProperty.call(a,s)&&(c[s]=a[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<r;l++)i[l]=t[l];return n.a.createElement.apply(null,i)}return n.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},97:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return i})),t.d(a,"metadata",(function(){return c})),t.d(a,"rightToc",(function(){return s})),t.d(a,"default",(function(){return p}));var o=t(2),n=t(6),r=(t(0),t(147)),i={id:"basic-tutorial",title:"Tutorial B\xe1sico",hide_title:!0,sidebar_label:"Tutorial B\xe1sico"},c={unversionedId:"introduction/basic-tutorial",id:"version-7.2/introduction/basic-tutorial",isDocsHomePage:!1,title:"Tutorial B\xe1sico",description:"Tutorial B\xe1sico",source:"@site/versioned_docs\\version-7.2\\introduction\\basic-tutorial.md",slug:"/introduction/basic-tutorial",permalink:"/react-redux/introduction/basic-tutorial",version:"7.2",sidebar_label:"Tutorial B\xe1sico",sidebar:"version-7.2/docs",previous:{title:"Come\xe7o r\xe1pido",permalink:"/react-redux/introduction/quick-start"},next:{title:"Por que usar React Redux?",permalink:"/react-redux/introduction/why-use-react-redux"}},s=[{value:"Um exemplo de lista de tarefas",id:"um-exemplo-de-lista-de-tarefas",children:[{value:"Fornecendo a Store",id:"fornecendo-a-store",children:[]},{value:"Conectando os componentes",id:"conectando-os-componentes",children:[]},{value:"Formas comuns de chamar <code>connect</code>",id:"formas-comuns-de-chamar-connect",children:[]}]},{value:"Links",id:"links",children:[]},{value:"Obtenha mais ajuda",id:"obtenha-mais-ajuda",children:[]}],l={rightToc:s};function p(e){var a=e.components,t=Object(n.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},l,t,{components:a,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"tutorial-b\xe1sico"},"Tutorial B\xe1sico"),Object(r.b)("p",null,"Para ver como usar o React Redux na pr\xe1tica, mostraremos um exemplo passo a passo criando um aplicativo de lista de tarefas."),Object(r.b)("h2",{id:"um-exemplo-de-lista-de-tarefas"},"Um exemplo de lista de tarefas"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Pule para")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"\ud83e\udd1e ",Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://codesandbox.io/s/9on71rvnyo"}),"Apenas me mostre o c\xf3digo")),Object(r.b)("li",{parentName:"ul"},"\ud83d\udc46 ",Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"#providing-the-store"}),"Fornecendo a store")),Object(r.b)("li",{parentName:"ul"},"\u270c\ufe0f ",Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"#connecting-the-components"}),"Conectando o Componente"))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Os componentes da UI do React")),Object(r.b)("p",null,"Implementamos nossos componentes React UI da seguinte maneira:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"TodoApp")," \xe9 o componente de entrada para nosso aplicativo. Ele renderiza os header e os componentes ",Object(r.b)("inlineCode",{parentName:"li"},"AddTodo"),", ",Object(r.b)("inlineCode",{parentName:"li"},"TodoList"),", e ",Object(r.b)("inlineCode",{parentName:"li"},"VisibilityFilters"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"AddTodo")," \xe9 o componente que permite ao usu\xe1rio inserir um item de tarefa e adicion\xe1-lo \xe0 lista ao clicar no bot\xe3o \u201cAdd todo\u201d:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Ele usa uma input controlado que define o estado ap\xf3s ",Object(r.b)("inlineCode",{parentName:"li"},"onChange"),"."),Object(r.b)("li",{parentName:"ul"},"Quando o usu\xe1rio clica no bot\xe3o \u201cAdd Todo\u201d, ele despacha a action (que iremos fornecer usando React Redux) para adicionar a tarefa \xe0 store."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"TodoList")," \xe9 o componente que renderiza a lista de tarefas:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Ele renderiza a lista filtrada de tarefas quando um dos ",Object(r.b)("inlineCode",{parentName:"li"},"VisibilityFilters"),"(filtros de visibilidade) \xe9 selecionado."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Todo")," \xe9 o componente que renderiza um \xfanico item de tarefa:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Ele renderiza o conte\xfado de tarefas e mostra que uma tarefa foi conclu\xedda fazendo um risco."),Object(r.b)("li",{parentName:"ul"},"Ele despacha a action para alternar o status completo da tarefa ap\xf3s ",Object(r.b)("inlineCode",{parentName:"li"},"onClick"),"."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"VisibilityFilters")," renderiza um conjunto simples de filtros: ",Object(r.b)("em",{parentName:"li"},"all"),", ",Object(r.b)("em",{parentName:"li"},"completed")," e ",Object(r.b)("em",{parentName:"li"},"incomplete.")," Clicar em cada um deles filtra as tarefas:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Aceita uma prop ",Object(r.b)("inlineCode",{parentName:"li"},"activeFilter")," do pai que indica qual filtro est\xe1 selecionado atualmente pelo usu\xe1rio. Um filtro ativo \xe9 renderizado com um sublinhado."),Object(r.b)("li",{parentName:"ul"},"Ele despacha a action ",Object(r.b)("inlineCode",{parentName:"li"},"setFilter")," para atualizar o filtro selecionado."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"constantes")," cont\xe9m os dados constantes para nosso aplicativo."),Object(r.b)("li",{parentName:"ul"},"E, finalmente, ",Object(r.b)("inlineCode",{parentName:"li"},"index")," renderiza nosso aplicativo para o DOM.")),Object(r.b)("br",null),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"A Redux Store")),Object(r.b)("p",null,"A parte Redux do aplicativo foi configurada usando os ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://redux.js.org"}),"padr\xf5es recomendados na documenta\xe7\xe3o do Redux"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Store",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"todos"),": um reducer normalizado de tarefas. Ele cont\xe9m um mapa ",Object(r.b)("inlineCode",{parentName:"li"},"byIds")," de todos as tarefas e um ",Object(r.b)("inlineCode",{parentName:"li"},"allIds")," que cont\xe9m a lista de todos os ids."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"visibilityFilters"),": A simple string ",Object(r.b)("inlineCode",{parentName:"li"},"all"),", ",Object(r.b)("inlineCode",{parentName:"li"},"completed"),", or ",Object(r.b)("inlineCode",{parentName:"li"},"incomplete"),"."))),Object(r.b)("li",{parentName:"ul"},"Action Creators",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"addTodo")," cria a action para adicionar tarefas. Ele pega uma \xfanica vari\xe1vel de string ",Object(r.b)("inlineCode",{parentName:"li"},"content")," e retorna uma action ",Object(r.b)("inlineCode",{parentName:"li"},"ADD_TODO")," com ",Object(r.b)("inlineCode",{parentName:"li"},"payload")," contendo um ",Object(r.b)("inlineCode",{parentName:"li"},"id")," e um ",Object(r.b)("inlineCode",{parentName:"li"},"content")," auto-incrementado"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"toggleTodo")," cria a action para alternar tarefas. Leva um \xfanico n\xfamero vari\xe1vel ",Object(r.b)("inlineCode",{parentName:"li"},"id")," e retorna uma action ",Object(r.b)("inlineCode",{parentName:"li"},"TOGGLE_TODO")," com ",Object(r.b)("inlineCode",{parentName:"li"},"payload")," contendo apenas ",Object(r.b)("inlineCode",{parentName:"li"},"id")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"setFilter")," cria a action para definir o filtro ativo do aplicativo. Ele pega uma \xfanica vari\xe1vel de string ",Object(r.b)("inlineCode",{parentName:"li"},"filter")," e retorna uma action ",Object(r.b)("inlineCode",{parentName:"li"},"SET_FILTER")," com ",Object(r.b)("inlineCode",{parentName:"li"},"payload")," contendo o pr\xf3prio ",Object(r.b)("inlineCode",{parentName:"li"},"filter")))),Object(r.b)("li",{parentName:"ul"},"Reducers",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"O reducer ",Object(r.b)("inlineCode",{parentName:"li"},"todos"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Acrescenta o ",Object(r.b)("inlineCode",{parentName:"li"},"id")," ao campo ",Object(r.b)("inlineCode",{parentName:"li"},"allIds")," e define a tarefa dentro do campo ",Object(r.b)("inlineCode",{parentName:"li"},"byIds")," ao receber a action ",Object(r.b)("inlineCode",{parentName:"li"},"ADD_TODO")),Object(r.b)("li",{parentName:"ul"},"Alterna o campo ",Object(r.b)("inlineCode",{parentName:"li"},"completed")," para a tarefa ao receber a action ",Object(r.b)("inlineCode",{parentName:"li"},"TOGGLE_TODO")))),Object(r.b)("li",{parentName:"ul"},"O reducer ",Object(r.b)("inlineCode",{parentName:"li"},"visibilityFilters")," define sua fatia de armazenamento para o novo filtro que recebe o payload da action ",Object(r.b)("inlineCode",{parentName:"li"},"SET_FILTER")))),Object(r.b)("li",{parentName:"ul"},"Action Types",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Usamos um arquivo ",Object(r.b)("inlineCode",{parentName:"li"},"actionTypes.js")," para manter as constantes dos actions types a serem reutilizados"))),Object(r.b)("li",{parentName:"ul"},"Selectors",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"getTodoList")," retorna a lista ",Object(r.b)("inlineCode",{parentName:"li"},"allIds")," da store ",Object(r.b)("inlineCode",{parentName:"li"},"todos")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"getTodoById")," acha a tarefa na store dado um ",Object(r.b)("inlineCode",{parentName:"li"},"id")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"getTodos")," \xe9 um pouco mais complexo. Ele pega todos os ",Object(r.b)("inlineCode",{parentName:"li"},"id"),"s de",Object(r.b)("inlineCode",{parentName:"li"}," allIds"),", encontra cada tarefa em ",Object(r.b)("inlineCode",{parentName:"li"},"byIds")," e retorna o array final de tarefas."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"getTodosByVisibilityFilter")," filtra as tarefas de acordo com o filtro de visibilidade")))),Object(r.b)("p",null,"Voc\xea pode verificar ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://codesandbox.io/s/6vwyqrpqk3"}),"este CodeSandbox")," para o c\xf3digo-fonte dos componentes UI e a Redux store desconectada descrita acima."),Object(r.b)("br",null),Object(r.b)("p",null,"Vamos agora mostrar como conectar esta store ao nosso aplicativo usando React Redux."),Object(r.b)("h3",{id:"fornecendo-a-store"},"Fornecendo a Store"),Object(r.b)("p",null,"Primeiro, precisamos disponibilizar a ",Object(r.b)("inlineCode",{parentName:"p"},"store")," para nosso aplicativo. Para fazer isso, envolvemos nosso aplicativo com a API ",Object(r.b)("inlineCode",{parentName:"p"},"<Provider />")," fornecida pelo React Redux."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"// index.js\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport TodoApp from './TodoApp'\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <TodoApp />\n  </Provider>,\n  rootElement\n)\n")),Object(r.b)("p",null,"Observe como nosso ",Object(r.b)("inlineCode",{parentName:"p"},"<TodoApp />")," agora est\xe1 envolvido com o ",Object(r.b)("inlineCode",{parentName:"p"},"<Provider />")," com ",Object(r.b)("inlineCode",{parentName:"p"},"store")," passado como um prop."),Object(r.b)("p",null,Object(r.b)("img",Object(o.a)({parentName:"p"},{src:"https://i.imgur.com/LV0XvwA.png",alt:null}))),Object(r.b)("h3",{id:"conectando-os-componentes"},"Conectando os componentes"),Object(r.b)("p",null,"React Redux fornece uma fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"connect")," para voc\xea ler os valores da store Redux (e reler os valores quando a store for atualizada)."),Object(r.b)("p",null,"A fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"connect")," leva dois argumentos, ambos opcionais:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps"),": chamado toda vez que o estado da store muda. Ele recebe todo o estado da store e deve retornar um objeto de dados de que esse componente precisa.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps"),": este par\xe2metro pode ser uma fun\xe7\xe3o ou um objeto."),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Se for uma fun\xe7\xe3o, ser\xe1 chamada uma vez na cria\xe7\xe3o do componente. Ele receber\xe1 ",Object(r.b)("inlineCode",{parentName:"li"},"dispatch")," como um argumento e deve retornar um objeto cheio de fun\xe7\xf5es que usam ",Object(r.b)("inlineCode",{parentName:"li"},"dispatch")," para despachar actions."),Object(r.b)("li",{parentName:"ul"},"Se for um objeto cheio de action creators, cada action creator ser\xe1 transformado em uma fun\xe7\xe3o prop que despacha automaticamente sua action quando chamada. ",Object(r.b)("strong",{parentName:"li"},"Nota"),": Recomendamos o uso deste forma de \u201cabrevia\xe7\xe3o de objeto\u201d.")))),Object(r.b)("p",null,"Normalmente, voc\xea chamar\xe1 ",Object(r.b)("inlineCode",{parentName:"p"},"connect")," desta forma:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"const mapStateToProps = (state, ownProps) => ({\n  // ... dados calculados do estado e opcionalmente ownProps\n})\n\nconst mapDispatchToProps = {\n  // ... normalmente \xe9 um objeto cheio de action creators\n}\n\n// `connect` retorna uma nova fun\xe7\xe3o que aceita o componente para envolver:\nconst connectToStore = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)\n// e essa fun\xe7\xe3o retorna o componente envolvido conectado:\nconst ConnectedComponent = connectToStore(Component)\n\n// Normalmente fazemos ambos em uma etapa, assim:\nconnect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Component)\n")),Object(r.b)("p",null,"Vamos trabalhar no ",Object(r.b)("inlineCode",{parentName:"p"},"<AddTodo />")," primeiro. Ele precisa acionar mudan\xe7as na ",Object(r.b)("inlineCode",{parentName:"p"},"store")," para adicionar novas tarefas. Portanto, ele precisa ser capaz de ",Object(r.b)("inlineCode",{parentName:"p"},"despachar")," actions para a store. \xc9 assim que fazemos."),Object(r.b)("p",null,"Nosso action creator ",Object(r.b)("inlineCode",{parentName:"p"},"addTodo")," se parece com isto:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"// redux/actions.js\nimport { ADD_TODO } from './actionTypes'\n\nlet nextTodoId = 0\nexport const addTodo = content => ({\n  type: ADD_TODO,\n  payload: {\n    id: ++nextTodoId,\n    content\n  }\n})\n\n// ... outras action\n")),Object(r.b)("p",null,"Ao pass\xe1-lo para ",Object(r.b)("inlineCode",{parentName:"p"},"connect"),", nosso componente o recebe como prop e ir\xe1 despachar automaticamente a action quando for chamado."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"// components/AddTodo.js\n\n// ... outras importa\xe7\xf5es\nimport { connect } from 'react-redux'\nimport { addTodo } from '../redux/actions'\n\nclass AddTodo extends React.Component {\n  // ... implementa\xe7\xe3o de componente\n}\n\nexport default connect(\n  null,\n  { addTodo }\n)(AddTodo)\n")),Object(r.b)("p",null,"Observe agora que ",Object(r.b)("inlineCode",{parentName:"p"},"<AddTodo />")," \xe9 envolvido com um componente pai chamado ",Object(r.b)("inlineCode",{parentName:"p"},"<Connect(AddTodo) />"),". Enquanto isso, ",Object(r.b)("inlineCode",{parentName:"p"},"<AddTodo />")," agora ganha uma prop: a action ",Object(r.b)("inlineCode",{parentName:"p"},"addTodo"),"."),Object(r.b)("p",null,Object(r.b)("img",Object(o.a)({parentName:"p"},{src:"https://i.imgur.com/u6aXbwl.png",alt:null}))),Object(r.b)("p",null,"Tamb\xe9m precisamos implementar a fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"handleAddTodo")," para deix\xe1-la despachar a action ",Object(r.b)("inlineCode",{parentName:"p"},"addTodo")," e redefinir a entrada"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"// components/AddTodo.js\n\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../redux/actions'\n\nclass AddTodo extends React.Component {\n  // ...\n\n  handleAddTodo = () => {\n    // despacha uma action para adicionar uma tarefa\n    this.props.addTodo(this.state.input)\n\n    // define o estado de volta para uma string vazia\n    this.setState({ input: '' })\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          onChange={e => this.updateInput(e.target.value)}\n          value={this.state.input}\n        />\n        <button className=\"add-todo\" onClick={this.handleAddTodo}>\n          Add Todo\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  null,\n  { addTodo }\n)(AddTodo)\n")),Object(r.b)("p",null,"Agora nosso ",Object(r.b)("inlineCode",{parentName:"p"},"<AddTodo />")," est\xe1 conectado \xe0 store. Quando adicionamos uma tarefa, ele despacha uma action para alterar a store. N\xe3o o vemos no aplicativo porque os outros componentes ainda n\xe3o est\xe3o conectados. Se voc\xea tiver a extens\xe3o Redux DevTools conectada, dever\xe1 ver a action sendo despachada:"),Object(r.b)("p",null,Object(r.b)("img",Object(o.a)({parentName:"p"},{src:"https://i.imgur.com/kHvkqhI.png",alt:null}))),Object(r.b)("p",null,"Voc\xea tamb\xe9m deve ver que a store mudou de acordo:"),Object(r.b)("p",null,Object(r.b)("img",Object(o.a)({parentName:"p"},{src:"https://i.imgur.com/yx27RVC.png",alt:null}))),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"<TodoList />")," component is responsible for rendering the list of todos. Therefore, it needs to read data from the store. We enable it by calling ",Object(r.b)("inlineCode",{parentName:"p"},"connect")," with the ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," parameter, a function describing which part of the data we need from the store."),Object(r.b)("p",null,"Our ",Object(r.b)("inlineCode",{parentName:"p"},"<Todo />")," component takes the todo item as props. We have this information from the ",Object(r.b)("inlineCode",{parentName:"p"},"byIds")," field of the ",Object(r.b)("inlineCode",{parentName:"p"},"todos"),". However, we also need the information from the ",Object(r.b)("inlineCode",{parentName:"p"},"allIds")," field of the store indicating which todos and in what order they should be rendered. Our ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," function may look like this:"),Object(r.b)("p",null,"O componente ",Object(r.b)("inlineCode",{parentName:"p"},"<TodoList />")," \xe9 respons\xe1vel por renderizar a lista de tarefas. Portanto, ele precisa ler os dados da store. N\xf3s o habilitamos chamando ",Object(r.b)("inlineCode",{parentName:"p"},"connect")," com o par\xe2metro ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps"),", uma fun\xe7\xe3o que descreve qual parte dos dados que precisamos do armazenamento."),Object(r.b)("p",null,"Nosso componente ",Object(r.b)("inlineCode",{parentName:"p"},"<Todo />")," recebe o item tarefa como props. Temos essa informa\xe7\xe3o no campo ",Object(r.b)("inlineCode",{parentName:"p"},"byIds")," do ",Object(r.b)("inlineCode",{parentName:"p"},"todos"),". No entanto, tamb\xe9m precisamos das informa\xe7\xf5es do campo ",Object(r.b)("inlineCode",{parentName:"p"},"allIds")," da store indicando quais tarefas e em que ordem eles devem ser processados. Nossa fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," pode ter a seguinte apar\xeancia:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'// components/TodoList.js\n\n// ...outras importa\xe7\xf5es\nimport { connect } from "react-redux";\n\nconst TodoList = // ... Implementa\xe7\xe3o do componente de UI\n\nconst mapStateToProps = state => {\n  const { byIds, allIds } = state.todos || {};\n  const todos =\n    allIds && allIds.length\n      ? allIds.map(id => (byIds ? { ...byIds[id], id } : null))\n      : null;\n  return { todos };\n};\n\nexport default connect(mapStateToProps)(TodoList);\n')),Object(r.b)("p",null,"Felizmente, temos um selector que faz exatamente isso. Podemos simplesmente importar o selector e us\xe1-lo aqui."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"// redux/selectors.js\n\nexport const getTodosState = store => store.todos\n\nexport const getTodoList = store =>\n  getTodosState(store) ? getTodosState(store).allIds : []\n\nexport const getTodoById = (store, id) =>\n  getTodosState(store) ? { ...getTodosState(store).byIds[id], id } : {}\n\nexport const getTodos = store =>\n  getTodoList(store).map(id => getTodoById(store, id))\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'// components/TodoList.js\n\n// ...outras importa\xe7\xf5es\nimport { connect } from "react-redux";\nimport { getTodos } from "../redux/selectors";\n\nconst TodoList = // ... Implementa\xe7\xe3o do componente de UI\n\nexport default connect(state => ({ todos: getTodos(state) }))(TodoList);****\n')),Object(r.b)("p",null,"Recomendamos encapsular quaisquer pesquisas ou c\xe1lculos complexos de dados em fun\xe7\xf5es selectors. Al\xe9m disso, voc\xea pode otimizar ainda mais o desempenho usando ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/reduxjs/reselect"}),"Reselect")," para escrever selectors \u201cmemoizados\u201d que podem pular trabalhos desnecess\xe1rios. (Veja ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://redux.js.org/recipes/computingderiveddata#sharing-selectors-across-multiple-components"}),"a p\xe1gina Redux docs em Computing Derived Data")," e a postagem do blog ","[Idiomatic Redux: Usando selectors do Relesect para encapsulamento e desempenho]","\u200b\u200b(",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://blog.isquaredsoftware.com/2017/12/idiomatic-redux-using-reselect-selectors"}),"https://blog.isquaredsoftware.com/2017/12/idiomatic-redux-using-reselect-selectors"),") para obter mais informa\xe7\xf5es sobre por que e como usar as fun\xe7\xf5es selectors.)"),Object(r.b)("p",null,"Agora que nosso ",Object(r.b)("inlineCode",{parentName:"p"},"<TodoList />")," est\xe1 conectado \xe0 store. Ele deve receber a lista de tarefas, mapear sobre eles e passar cada tarefa para o componente ",Object(r.b)("inlineCode",{parentName:"p"},"<Todo />"),". ",Object(r.b)("inlineCode",{parentName:"p"},"<Todo />"),", por sua vez, os renderizar\xe1 na tela. Agora tente adicionar uma tarefa. Deve aparecer na nossa lista de tarefas!"),Object(r.b)("p",null,Object(r.b)("img",Object(o.a)({parentName:"p"},{src:"https://i.imgur.com/N68xvrG.png",alt:null}))),Object(r.b)("p",null,"Vamos conectar mais componentes. Antes de fazermos isso, vamos fazer uma pausa e aprender um pouco mais sobre ",Object(r.b)("inlineCode",{parentName:"p"},"connect")," primeiro."),Object(r.b)("h3",{id:"formas-comuns-de-chamar-connect"},"Formas comuns de chamar ",Object(r.b)("inlineCode",{parentName:"h3"},"connect")),Object(r.b)("p",null,"Dependendo dos tipos de componentes com os quais voc\xea est\xe1 trabalhando, existem diferentes maneiras de chamar ",Object(r.b)("inlineCode",{parentName:"p"},"connect"),", com as mais comuns resumidas a seguir:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(o.a)({parentName:"tr"},{align:null})),Object(r.b)("th",Object(o.a)({parentName:"tr"},{align:null}),"N\xe3o inscreve a Store"),Object(r.b)("th",Object(o.a)({parentName:"tr"},{align:null}),"inscreve a Store"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(o.a)({parentName:"tr"},{align:null}),"N\xe3o injeta action creators"),Object(r.b)("td",Object(o.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"connect()(Component)")),Object(r.b)("td",Object(o.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"connect(mapStateToProps)(Component)"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(o.a)({parentName:"tr"},{align:null}),"Injeta action creators"),Object(r.b)("td",Object(o.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"connect(null, mapDispatchToProps)(Component)")),Object(r.b)("td",Object(o.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"connect(mapStateToProps, mapDispatchToProps)(Component)"))))),Object(r.b)("h4",{id:"n\xe3o-assina-a-store-e-n\xe3o-injete-action-creators"},"N\xe3o assina a store e n\xe3o injete action creators"),Object(r.b)("p",null,"Se voc\xea chamar ",Object(r.b)("inlineCode",{parentName:"p"},"connect")," sem fornecer nenhum argumento, seu componente ir\xe1:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("em",{parentName:"li"},"n\xe3o")," vai re-renderizar novamente quando a store mudar"),Object(r.b)("li",{parentName:"ul"},"receber ",Object(r.b)("inlineCode",{parentName:"li"},"props.dispatch")," que voc\xea pode usar para despachar manualmente a a\xe7\xe3o")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"// ... Componente\nexport default connect()(Component) // O componente receber\xe1 `dispatch` (assim como nosso <TodoList />!)\n")),Object(r.b)("h4",{id:"assina-a-store-e-n\xe3o-injete-action-creators"},"Assina a store e n\xe3o injete action creators"),Object(r.b)("p",null,"Se voc\xea chamar ",Object(r.b)("inlineCode",{parentName:"p"},"connect")," apenas com ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps"),", seu componente ir\xe1:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Assina os valores que ",Object(r.b)("inlineCode",{parentName:"li"},"mapStateToProps")," extrai da store e renderize novamente apenas quando esses valores forem alterados"),Object(r.b)("li",{parentName:"ul"},"receba ",Object(r.b)("inlineCode",{parentName:"li"},"props.dispatch")," que voc\xea pode usar para despachar manualmente a action")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"// ... Componente\nconst mapStateToProps = state => state.partOfState\nexport default connect(mapStateToProps)(Component)\n")),Object(r.b)("h4",{id:"n\xe3o-assina-a-store-e-injete-action-creators"},"N\xe3o assina a store e injete action creators"),Object(r.b)("p",null,"Se voc\xea chamar ",Object(r.b)("inlineCode",{parentName:"p"},"connect")," apenas com ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps"),", seu componente ir\xe1:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("em",{parentName:"li"},"n\xe3o")," renderizar novamente quando a store muda"),Object(r.b)("li",{parentName:"ul"},"receba cada um dos action creator que voc\xea injeta com ",Object(r.b)("inlineCode",{parentName:"li"},"mapDispatchToProps")," como props e despacha automaticamente as actions ao serem chamadas")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"import { addTodo } from './actionCreators'\n// ... Component\nexport default connect(\n  null,\n  { addTodo }\n)(Component)\n")),Object(r.b)("h4",{id:"assina-na-store-e-injete-os-actions-creators"},"Assina na store e injete os actions creators"),Object(r.b)("p",null,"Se voc\xea chamar ",Object(r.b)("inlineCode",{parentName:"p"},"connect")," com ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," e ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps"),", seu componente ir\xe1:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"inscreve os valores que ",Object(r.b)("inlineCode",{parentName:"li"},"mapStateToProps")," extrai da store e renderiza novamente apenas quando esses valores forem alterados"),Object(r.b)("li",{parentName:"ul"},"receba todos os action creator que voc\xea injeta com ",Object(r.b)("inlineCode",{parentName:"li"},"mapDispatchToProps")," como props e despacha automaticamente as actions ao serem chamadas.")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"import * as actionCreators from './actionCreators'\n// ... Component\nconst mapStateToProps = state => state.partOfState\nexport default connect(\n  mapStateToProps,\n  actionCreators\n)(Component)\n")),Object(r.b)("p",null,"Esses quatro casos cobrem os usos mais b\xe1sicos de ",Object(r.b)("inlineCode",{parentName:"p"},"connect"),". Para ler mais sobre ",Object(r.b)("inlineCode",{parentName:"p"},"connect"),", continue lendo nossa ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/react-redux/api/connect"}),"se\xe7\xe3o API")," que explica em mais detalhes."),Object(r.b)("hr",null),Object(r.b)("p",null,"Agora vamos conectar o restante do nosso ",Object(r.b)("inlineCode",{parentName:"p"},"<TodoApp />"),"."),Object(r.b)("p",null,"Como devemos implementar a intera\xe7\xe3o de alternar tarefas? Um leitor interessado j\xe1 pode ter uma resposta. Se voc\xea configurou seu ambiente e o acompanhou at\xe9 este ponto, agora \xe9 um bom momento para deix\xe1-lo de lado e implementar o recurso por conta pr\xf3pria. N\xe3o seria nenhuma surpresa que conectamos nosso ",Object(r.b)("inlineCode",{parentName:"p"},"<Todo />")," para despachar ",Object(r.b)("inlineCode",{parentName:"p"},"toggleTodo")," de uma forma semelhante:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'// components/Todo.js\n\n// ... outras importa\xe7\xf5es\nimport { connect } from "react-redux";\nimport { toggleTodo } from "../redux/actions";\n\nconst Todo = // ... implementa\xe7\xe3o do componente\n\nexport default connect(\n  null,\n  { toggleTodo }\n)(Todo);\n')),Object(r.b)("p",null,"Agora, nossas tarefas podem ser alternadas para conclu\xeddas. Estamos quase l\xe1!"),Object(r.b)("p",null,Object(r.b)("img",Object(o.a)({parentName:"p"},{src:"https://i.imgur.com/4UBXYtj.png",alt:null}))),Object(r.b)("p",null,"Finalmente, vamos implementar nosso recurso ",Object(r.b)("inlineCode",{parentName:"p"},"VisibilityFilters"),"."),Object(r.b)("p",null,"O componente ",Object(r.b)("inlineCode",{parentName:"p"},"<VisibilityFilters />")," precisa ser capaz de ler da store qual filtro est\xe1 ativo no momento e despachar actions para a store. Portanto, precisamos passar um ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," e ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps"),". O ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," aqui pode ser um acessador simples do estado ",Object(r.b)("inlineCode",{parentName:"p"},"visibilityFilter"),". E o ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps")," conter\xe1 o action creator ",Object(r.b)("inlineCode",{parentName:"p"},"setFilter"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'// components/VisibilityFilters.js\n\n// ... outras importa\xe7\xf5es\nimport { connect } from "react-redux";\nimport { setFilter } from "../redux/actions";\n\nconst VisibilityFilters = // ... implementa\xe7\xe3o do componente\n\nconst mapStateToProps = state => {\n  return { activeFilter: state.visibilityFilter };\n};\nexport default connect(\n  mapStateToProps,\n  { setFilter }\n)(VisibilityFilters);\n')),Object(r.b)("p",null,"Enquanto isso, tamb\xe9m precisamos atualizar nosso componente ",Object(r.b)("inlineCode",{parentName:"p"},"<TodoList />")," para filtrar todos de acordo com o filtro ativo. Anteriormente, o ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," que passamos para a chamada da fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"<TodoList />")," ",Object(r.b)("inlineCode",{parentName:"p"},"connect")," era simplesmente o selector que seleciona toda a lista de tarefas. Vamos escrever outro selector para ajudar a filtrar tarefas por seu status."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"// redux/selectors.js\n\n// ... outros selectors\nexport const getTodosByVisibilityFilter = (store, visibilityFilter) => {\n  const allTodos = getTodos(store)\n  switch (visibilityFilter) {\n    case VISIBILITY_FILTERS.COMPLETED:\n      return allTodos.filter(todo => todo.completed)\n    case VISIBILITY_FILTERS.INCOMPLETE:\n      return allTodos.filter(todo => !todo.completed)\n    case VISIBILITY_FILTERS.ALL:\n    default:\n      return allTodos\n  }\n}\n")),Object(r.b)("p",null,"E conectando-se \xe0 store com a ajuda do selector:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"// components/TodoList.js\n\n// ...\n\nconst mapStateToProps = state => {\n  const { visibilityFilter } = state\n  const todos = getTodosByVisibilityFilter(state, visibilityFilter)\n  return { todos }\n}\n\nexport default connect(mapStateToProps)(TodoList)\n")),Object(r.b)("p",null,"Agora terminamos um exemplo muito simples de um aplicativo de tarefas com React Redux. Todos os nossos componentes est\xe3o conectados! N\xe3o \xe9 incr\xedvel? \ud83c\udf89\ud83c\udf8a"),Object(r.b)("p",null,Object(r.b)("img",Object(o.a)({parentName:"p"},{src:"https://i.imgur.com/ONqer2R.png",alt:null}))),Object(r.b)("h2",{id:"links"},"Links"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://redux.js.org/basics/usage-with-react"}),"Uso com React")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://blog.isquaredsoftware.com/presentations/workshops/redux-fundamentals/react-redux.html"}),"Usando as liga\xe7\xf5es React Redux")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e"}),"Componentes de ordem superior a fundo")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://redux.js.org/recipes/computing-derived-data#sharing-selectors-across-multiple-components"}),"Computando Dados Derivados")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://blog.isquaredsoftware.com/2017/12/idiomatic-redux-using-reselect-selectors/"}),"Redux idiom\xe1tico: Usando Reselect Selectors para encapsulamento e desempenho"))),Object(r.b)("h2",{id:"obtenha-mais-ajuda"},"Obtenha mais ajuda"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://www.reactiflux.com"}),"Reactiflux")," canal do Redux"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://stackoverflow.com/questions/tagged/react-redux"}),"StackOverflow")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://github.com/reduxjs/react-redux/issues/"}),"GitHub Issues"))))}p.isMDXComponent=!0}}]);