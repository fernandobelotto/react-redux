(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{143:function(e,o,a){"use strict";a.r(o),a.d(o,"frontMatter",(function(){return p})),a.d(o,"metadata",(function(){return c})),a.d(o,"rightToc",(function(){return s})),a.d(o,"default",(function(){return b}));var t=a(2),n=a(6),r=(a(0),a(147)),p={id:"connect",title:"Connect",sidebar_label:"connect()",hide_title:!0},c={unversionedId:"api/connect",id:"version-7.2/api/connect",isDocsHomePage:!1,title:"Connect",description:"connect()",source:"@site/versioned_docs\\version-7.2\\api\\connect.md",slug:"/api/connect",permalink:"/react-redux/api/connect",version:"7.2",sidebar_label:"connect()",sidebar:"version-7.2/docs",previous:{title:"Tipagem Est\xe1tica",permalink:"/react-redux/using-react-redux/static-typing"},next:{title:"Provider",permalink:"/react-redux/api/provider"}},s=[{value:"Vis\xe3o geral",id:"vis\xe3o-geral",children:[]},{value:"Par\xe2metros da <code>connect()</code>",id:"par\xe2metros-da-connect",children:[{value:"<code>mapStateToProps?: (state, ownProps?) =&gt; Object</code>",id:"mapstatetoprops-state-ownprops--object",children:[]},{value:"<code>mapDispatchToProps?: Object | (dispatch, ownProps?) =&gt; Object</code>",id:"mapdispatchtoprops-object--dispatch-ownprops--object",children:[]},{value:"<code>mergeProps?: (stateProps, dispatchProps, ownProps) =&gt; Object</code>",id:"mergeprops-stateprops-dispatchprops-ownprops--object",children:[]},{value:"<code>options?: Object</code>",id:"options-object",children:[]}]},{value:"Retorno da <code>connect()</code>",id:"retorno-da-connect",children:[]},{value:"Exemplo de uso",id:"exemplo-de-uso",children:[]},{value:"Notas",id:"notas",children:[{value:"A Aridade das Fun\xe7\xf5es <code>mapToProps</code>",id:"a-aridade-das-fun\xe7\xf5es-maptoprops",children:[]},{value:"Factory Functions",id:"factory-functions",children:[]}]}],i={rightToc:s};function b(e){var o=e.components,a=Object(n.a)(e,["components"]);return Object(r.b)("wrapper",Object(t.a)({},i,a,{components:o,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"connect"},Object(r.b)("inlineCode",{parentName:"h1"},"connect()")),Object(r.b)("h2",{id:"vis\xe3o-geral"},"Vis\xe3o geral"),Object(r.b)("p",null,"A fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"connect()")," conecta um componente React a uma Redux store."),Object(r.b)("p",null,"Ele fornece a seu componente conectado as partes dos dados de que precisa da store e as fun\xe7\xf5es que pode usar para despachar actions para a store."),Object(r.b)("p",null,"Ele n\xe3o modifica a classe de componente que voc\xea passou a ela; em vez disso, ela retorna uma nova classe de componente conectado que envolve o componente que voc\xea passou."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"function connect(mapStateToProps?, mapDispatchToProps?, mergeProps?, options?)\n")),Object(r.b)("p",null,"O ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," e ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps")," lida com o ",Object(r.b)("inlineCode",{parentName:"p"},"state")," e ",Object(r.b)("inlineCode",{parentName:"p"},"dispatch")," de sua Redux store, respectivamente. ",Object(r.b)("inlineCode",{parentName:"p"},"state")," e ",Object(r.b)("inlineCode",{parentName:"p"},"dispatch")," ser\xe3o fornecidos para suas fun\xe7\xf5es ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," ou",Object(r.b)("inlineCode",{parentName:"p"}," mapDispatchToProps")," como o primeiro argumento."),Object(r.b)("p",null,"Os retornos de ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," e ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps")," s\xe3o referidos internamente como ",Object(r.b)("inlineCode",{parentName:"p"},"stateProps")," e ",Object(r.b)("inlineCode",{parentName:"p"},"dispatchProps"),", respectivamente. Eles ser\xe3o fornecidos a ",Object(r.b)("inlineCode",{parentName:"p"},"mergeProps"),", se definidos, como o primeiro e o segundo argumento, onde o terceiro argumento ser\xe1 ",Object(r.b)("inlineCode",{parentName:"p"},"ownProps"),". O resultado combinado, comumente referido como ",Object(r.b)("inlineCode",{parentName:"p"},"mergedProps"),", ser\xe1 ent\xe3o fornecido ao seu componente conectado."),Object(r.b)("h2",{id:"par\xe2metros-da-connect"},"Par\xe2metros da ",Object(r.b)("inlineCode",{parentName:"h2"},"connect()")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"connect")," aceita quatro par\xe2metros diferentes, todos opcionais. Por conven\xe7\xe3o, eles s\xe3o chamados de:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"mapStateToProps?: Fun\xe7\xe3o")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"mapDispatchToProps?: Fun\xe7\xe3o | Objeto")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"mergeProps?: Fun\xe7\xe3o")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"options?: Objeto"))),Object(r.b)("h3",{id:"mapstatetoprops-state-ownprops--object"},Object(r.b)("inlineCode",{parentName:"h3"},"mapStateToProps?: (state, ownProps?) => Object")),Object(r.b)("p",null,"Se uma fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," for especificada, o novo componente envolvido ir\xe1 assinar as atualiza\xe7\xf5es da Redux store. Isso significa que sempre que o armazenamento for atualizado, ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," ser\xe1 chamado. Os resultados de ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," devem ser um objeto simples, que ser\xe1 mesclado nas propriedades do componente encapsulado. Se voc\xea n\xe3o quiser assinar para armazenar atualiza\xe7\xf5es, passe ",Object(r.b)("inlineCode",{parentName:"p"},"null")," ou ",Object(r.b)("inlineCode",{parentName:"p"},"undefined")," no lugar de ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps"),"."),Object(r.b)("h4",{id:"par\xe2metros"},"Par\xe2metros"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"state: Objeto")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"ownProps?: Objeto"))),Object(r.b)("p",null,"Uma fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," leva no m\xe1ximo dois par\xe2metros. O n\xfamero de par\xe2metros de fun\xe7\xe3o declarados (tamb\xe9m conhecido como aridade) afeta quando ela ser\xe1 chamada. Isso tamb\xe9m determina se a fun\xe7\xe3o receber\xe1 ownProps. Veja notas ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"#the-arity-of-maptoprops-functions"}),"aqui"),"."),Object(r.b)("h5",{id:"state"},Object(r.b)("inlineCode",{parentName:"h5"},"state")),Object(r.b)("p",null,"Se sua fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," for declarada como tendo um par\xe2metro, ela ser\xe1 chamada sempre que o estado da store mudar, e dado o estado da store como o \xfanico par\xe2metro."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"const mapStateToProps = state => ({ todos: state.todos })\n")),Object(r.b)("h5",{id:"ownprops"},Object(r.b)("inlineCode",{parentName:"h5"},"ownProps")),Object(r.b)("p",null,"Se sua fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," for declarada como tendo dois par\xe2metros, ela ser\xe1 chamada sempre que o estado da store mudar ",Object(r.b)("em",{parentName:"p"},"ou")," quando o componente envolvido receber novos props (com base em compara\xe7\xf5es de igualdade rasas (shallow equality)). Ele receber\xe1 o estado da store como o primeiro par\xe2metro e os props do componente encolvido como o segundo par\xe2metro."),Object(r.b)("p",null,"O segundo par\xe2metro \xe9 normalmente referido como ",Object(r.b)("inlineCode",{parentName:"p"},"ownProps")," por conven\xe7\xe3o."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"const mapStateToProps = (state, ownProps) => ({\n  todo: state.todos[ownProps.id]\n})\n")),Object(r.b)("h4",{id:"retorno"},"Retorno"),Object(r.b)("p",null,"Espera-se que suas fun\xe7\xf5es ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," retornem um objeto. Este objeto, normalmente conhecido como ",Object(r.b)("inlineCode",{parentName:"p"},"stateProps"),", ser\xe1 mesclado como props para o seu componente conectado. Se voc\xea definir ",Object(r.b)("inlineCode",{parentName:"p"},"mergeProps"),", ele ser\xe1 fornecido como o primeiro par\xe2metro para",Object(r.b)("inlineCode",{parentName:"p"}," mergeProps"),"."),Object(r.b)("p",null,"O retorno de ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," determina se o componente conectado ir\xe1 renderizar novamente (detalhes ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"../using-react-redux/connect-mapstate#return-values-determine-if-your-component-re-renders"}),"aqui"),")."),Object(r.b)("p",null,"Para obter mais detalhes sobre o uso recomendado de ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps"),", consulte ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"../using-react-redux/connect-mapstate"}),"nosso guia sobre como usar",Object(r.b)("inlineCode",{parentName:"a"}," mapStateToProps")),"."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Voc\xea pode definir ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," e",Object(r.b)("inlineCode",{parentName:"p"}," mapDispatchToProps")," como uma factory function, ou seja, voc\xea retorna uma fun\xe7\xe3o em vez de um objeto. Neste caso, sua fun\xe7\xe3o retornada ser\xe1 tratada como o real ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," ou ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps"),", e ser\xe1 chamada em chamadas subsequentes. Voc\xea pode ver notas em ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"#factory-functions"}),"Factory Funcions")," ou nosso guia sobre otimiza\xe7\xf5es de desempenho.")),Object(r.b)("h3",{id:"mapdispatchtoprops-object--dispatch-ownprops--object"},Object(r.b)("inlineCode",{parentName:"h3"},"mapDispatchToProps?: Object | (dispatch, ownProps?) => Object")),Object(r.b)("p",null,"Convencionalmente chamado de ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps"),", este segundo par\xe2metro para ",Object(r.b)("inlineCode",{parentName:"p"},"connect()")," pode ser um objeto, uma fun\xe7\xe3o ou n\xe3o ser fornecido."),Object(r.b)("p",null,"Seu componente receber\xe1 ",Object(r.b)("inlineCode",{parentName:"p"},"dispatch")," por padr\xe3o, ou seja, quando voc\xea n\xe3o fornecer um segundo par\xe2metro para ",Object(r.b)("inlineCode",{parentName:"p"},"connect()"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"// n\xe3o passe `mapDispatchToProps`\nconnect()(MyComponent)\nconnect(mapState)(MyComponent)\nconnect(\n  mapState,\n  null,\n  mergeProps,\n  options\n)(MyComponent)\n")),Object(r.b)("p",null,"Se voc\xea definir um ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps")," como uma fun\xe7\xe3o, ele ser\xe1 chamado com no m\xe1ximo dois par\xe2metros."),Object(r.b)("h4",{id:"par\xe2metros-1"},"Par\xe2metros"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"dispatch: Fun\xe7\xe3o")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"ownProps?: Objeto"))),Object(r.b)("h5",{id:"dispatch"},Object(r.b)("inlineCode",{parentName:"h5"},"dispatch")),Object(r.b)("p",null,"Se seu ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps")," for declarado como uma fun\xe7\xe3o recebendo um par\xe2metro, ele receber\xe1 o ",Object(r.b)("inlineCode",{parentName:"p"},"dispatch")," de sua ",Object(r.b)("inlineCode",{parentName:"p"},"store"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"const mapDispatchToProps = dispatch => {\n  return {\n    // despachando actions simples\n    increment: () => dispatch({ type: 'INCREMENT' }),\n    decrement: () => dispatch({ type: 'DECREMENT' }),\n    reset: () => dispatch({ type: 'RESET' })\n  }\n}\n")),Object(r.b)("h5",{id:"ownprops-1"},Object(r.b)("inlineCode",{parentName:"h5"},"ownProps")),Object(r.b)("p",null,"Se sua fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps")," for declarada como tendo dois par\xe2metros, ela ser\xe1 chamada com ",Object(r.b)("inlineCode",{parentName:"p"},"dispatch")," como o primeiro par\xe2metro e os props passados \u200b\u200bpara o componente envolvido como o segundo par\xe2metro, e ser\xe3o re-invocados sempre que o componente conectado receber novas props."),Object(r.b)("p",null,"O segundo par\xe2metro \xe9 normalmente referido como ",Object(r.b)("inlineCode",{parentName:"p"},"ownProps")," por conven\xe7\xe3o."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"// vincula-se \xe0 re-renderiza\xe7\xe3o do componente\n<button onClick={() => this.props.toggleTodo(this.props.todoId)} />\n\n// vincula-se \xe0 mudan\xe7a de `props`\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  toggleTodo: () => dispatch(toggleTodo(ownProps.todoId))\n}\n")),Object(r.b)("p",null,"O n\xfamero de par\xe2metros de fun\xe7\xe3o declarados de ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps")," determina se eles recebem ownProps. Veja notas ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"#the-arity-of-maptoprops-functions"}),"aqui"),"."),Object(r.b)("h4",{id:"retorno-1"},"Retorno"),Object(r.b)("p",null,"Espera-se que suas fun\xe7\xf5es ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps")," retornem um objeto. Cada campo do objeto deve ser uma fun\xe7\xe3o, chamando a qual se espera que despache uma action para a store."),Object(r.b)("p",null,"O retorno de suas fun\xe7\xf5es ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps")," s\xe3o considerados ",Object(r.b)("inlineCode",{parentName:"p"},"dispatchProps"),". Ele ser\xe1 mesclado como props ao seu componente conectado. Se voc\xea definir ",Object(r.b)("inlineCode",{parentName:"p"},"mergeProps"),", ele ser\xe1 fornecido como o segundo par\xe2metro para",Object(r.b)("inlineCode",{parentName:"p"}," mergeProps"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"const createMyAction = () => ({ type: 'MY_ACTION' })\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const boundActions = bindActionCreators({ createMyAction }, dispatch)\n  return {\n    dispatchPlainObject: () => dispatch({ type: 'MY_ACTION' }),\n    dispatchActionCreatedByActionCreator: () => dispatch(createMyAction()),\n    ...boundActions,\n    // voc\xea pode devolver a dispatch aqui\n    dispatch\n  }\n}\n")),Object(r.b)("p",null,"Para obter mais detalhes sobre o uso recomendado, consulte ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"../using-react-redux/connect-mapdispatch"}),"nosso guia sobre como usar ",Object(r.b)("inlineCode",{parentName:"a"},"mapDispatchToProps")),"."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Voc\xea pode definir ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," e",Object(r.b)("inlineCode",{parentName:"p"}," mapDispatchToProps")," como uma factory function, ou seja, voc\xea retorna uma fun\xe7\xe3o em vez de um objeto. Neste caso, sua fun\xe7\xe3o retornada ser\xe1 tratada como o real ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," ou",Object(r.b)("inlineCode",{parentName:"p"}," mapDispatchToProps"),", e ser\xe1 chamada em chamadas subsequentes. Voc\xea pode ver notas em ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"#factory-functions"}),"Factory Functions")," ou nosso guia sobre otimiza\xe7\xf5es de desempenho.")),Object(r.b)("h4",{id:"forma-abreviada-de-objeto"},"Forma abreviada de objeto"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps")," pode ser um objeto onde cada campo \xe9 um ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"https://redux.js.org/glossary#action-creator"}),"action creator"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"import { addTodo, deleteTodo, toggleTodo } from './actionCreators'\n\nconst mapDispatchToProps = {\n  addTodo,\n  deleteTodo,\n  toggleTodo\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(TodoApp)\n")),Object(r.b)("p",null,"Neste caso, React-Redux vincula a ",Object(r.b)("inlineCode",{parentName:"p"},"dispatch")," de sua store a cada um dos action creators usando",Object(r.b)("inlineCode",{parentName:"p"}," bindActionCreators"),". O resultado ser\xe1 considerado como ",Object(r.b)("inlineCode",{parentName:"p"},"dispatchProps"),", que ser\xe1 diretamente mesclado aos componentes conectados ou fornecido a ",Object(r.b)("inlineCode",{parentName:"p"},"mergeProps")," como o segundo argumento."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"// internamente, React-Redux chama bindActionCreators\n// para vincular os action creators a dispatch de sua store\nbindActionCreators(mapDispatchToProps, dispatch)\n")),Object(r.b)("p",null,"Tamb\xe9m temos uma se\xe7\xe3o em nosso guia ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps")," sobre o uso da forma abreviada de objeto ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"../using-react-redux/connect-mapdispatch#defining-mapdispatchtoprops-as-an-object"}),"aqui"),"."),Object(r.b)("h3",{id:"mergeprops-stateprops-dispatchprops-ownprops--object"},Object(r.b)("inlineCode",{parentName:"h3"},"mergeProps?: (stateProps, dispatchProps, ownProps) => Object")),Object(r.b)("p",null,"Se especificado, define como os props finais para seu pr\xf3prio componente envolvido s\xe3o determinados. Se voc\xea n\xe3o fornecer ",Object(r.b)("inlineCode",{parentName:"p"},"mergeProps"),", seu componente envolvido receber\xe1 ",Object(r.b)("inlineCode",{parentName:"p"},"{...ownProps, ...stateProps, ...dispatchProps}")," por padr\xe3o."),Object(r.b)("h4",{id:"par\xe2metros-2"},"Par\xe2metros"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"mergeProps")," deve ser especificado com no m\xe1ximo tr\xeas par\xe2metros. Eles s\xe3o o resultado de ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps()"),", ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps()")," e os ",Object(r.b)("inlineCode",{parentName:"p"},"props")," do componente envolvido, respectivamente:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"stateProps")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"dispatchProps")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"ownProps"))),Object(r.b)("p",null,"Os campos no objeto simples que voc\xea retorna dele ser\xe3o usados \u200b\u200bcomo props para o componente envolvido. Voc\xea pode especificar esta fun\xe7\xe3o para selecionar uma parte do estado com base em props ou para ligar os action creators a uma vari\xe1vel particular de props."),Object(r.b)("h4",{id:"retorno-2"},"Retorno"),Object(r.b)("p",null,"O valor de retorno de ",Object(r.b)("inlineCode",{parentName:"p"},"mergeProps")," \xe9 referido como ",Object(r.b)("inlineCode",{parentName:"p"},"mergedProps")," e os campos ser\xe3o usados \u200b\u200bcomo props para o componente encapsulado."),Object(r.b)("h3",{id:"options-object"},Object(r.b)("inlineCode",{parentName:"h3"},"options?: Object")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"{\n  context?: Object,\n  pure?: boolean,\n  areStatesEqual?: Function,\n  areOwnPropsEqual?: Function,\n  areStatePropsEqual?: Function,\n  areMergedPropsEqual?: Function,\n  forwardRef?: boolean,\n}\n")),Object(r.b)("h4",{id:"context-object"},Object(r.b)("inlineCode",{parentName:"h4"},"context: Object")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Nota: Este par\xe2metro \xe9 compat\xedvel com >= v6.0 apenas")),Object(r.b)("p",null,"React-Redux v6 permite que voc\xea forne\xe7a uma inst\xe2ncia de context customizada para ser usada pelo React-Redux.\nVoc\xea precisa passar a inst\xe2ncia de seu context para ",Object(r.b)("inlineCode",{parentName:"p"},"<Provider />")," e seu componente conectado.\nVoc\xea pode passar o contexto para o seu componente conectado passando-o aqui como um campo de op\xe7\xe3o ou como uma props para o seu componente conectado na renderiza\xe7\xe3o."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"// const MyContext = React.createContext();\nconnect(\n  mapStateToProps,\n  mapDispatchToProps,\n  null,\n  { context: MyContext }\n)(MyComponent)\n")),Object(r.b)("h4",{id:"pure-boolean"},Object(r.b)("inlineCode",{parentName:"h4"},"pure: boolean")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"valor padr\xe3o: ",Object(r.b)("inlineCode",{parentName:"li"},"true"))),Object(r.b)("p",null,'Assume que o componente envolvido \xe9 um componente "puro" e n\xe3o depende de nenhuma entrada ou estado al\xe9m de seus props e o estado da Redux store selecionada.'),Object(r.b)("p",null,"Quando ",Object(r.b)("inlineCode",{parentName:"p"},"options.pure")," \xe9 verdadeiro, ",Object(r.b)("inlineCode",{parentName:"p"},"connect")," executa v\xe1rias verifica\xe7\xf5es de igualdade que s\xe3o usadas para evitar chamadas desnecess\xe1rias para ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps"),", ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps"),", ",Object(r.b)("inlineCode",{parentName:"p"},"mergeProps")," e, finalmente, para ",Object(r.b)("inlineCode",{parentName:"p"},"render"),". Estes incluem ",Object(r.b)("inlineCode",{parentName:"p"},"areStatesEqual"),", ",Object(r.b)("inlineCode",{parentName:"p"},"areOwnPropsEqual"),", ",Object(r.b)("inlineCode",{parentName:"p"},"areStatePropsEqual")," e ",Object(r.b)("inlineCode",{parentName:"p"},"areMergedPropsEqual"),". Embora os padr\xf5es provavelmente sejam apropriados 99% das vezes, voc\xea pode desejar substitu\xed-los por implementa\xe7\xf5es personalizadas para desempenho ou outros motivos."),Object(r.b)("p",null,"Fornecemos alguns exemplos nas se\xe7\xf5es a seguir."),Object(r.b)("h4",{id:"arestatesequal-next-object-prev-object--boolean"},Object(r.b)("inlineCode",{parentName:"h4"},"areStatesEqual: (next: Object, prev: Object) => boolean")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"valor padr\xe3o: ",Object(r.b)("inlineCode",{parentName:"li"},"strictEqual: (next, prev) => prev === next"))),Object(r.b)("p",null,"Quando puro, compara o estado da store de entrada com seu valor anterior."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Exemplo 1")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"const areStatesEqual = (next, prev) =>\n  prev.entities.todos === next.entities.todos\n")),Object(r.b)("p",null,"Voc\xea pode desejar sobrescrever ",Object(r.b)("inlineCode",{parentName:"p"},"areStatesEqual")," se sua fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," for computacionalmente pesada e tamb\xe9m estiver preocupada apenas com uma pequena parte de seu estado. O exemplo acima ir\xe1 efetivamente ignorar as mudan\xe7as de estado para tudo, exceto para aquela parte do estado."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Exemplo 2")),Object(r.b)("p",null,"Se voc\xea tiver redutores impuros que alteram o seu estado da store, voc\xea pode substituir ",Object(r.b)("inlineCode",{parentName:"p"},"areStatesEqual")," para sempre retornar falso:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"const areStatesEqual = () => false\n")),Object(r.b)("p",null,"Isso provavelmente afetaria as outras verifica\xe7\xf5es de igualdade tamb\xe9m, dependendo de sua fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps"),"."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"areOwnPropsEqual: (next: Object, prev: Object) => boolean")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"valor padr\xe3o: ",Object(r.b)("inlineCode",{parentName:"li"},"shallowEqual: (objA, objB) => boolean"),"\n( retorna ",Object(r.b)("inlineCode",{parentName:"li"},"verdadeiro")," quando cada campo dos objetos \xe9 igual )")),Object(r.b)("p",null,"Quando puro, compara os props recebidos com seu valor anterior."),Object(r.b)("p",null,"Voc\xea pode querer substituir ",Object(r.b)("inlineCode",{parentName:"p"},"areOwnPropsEqual")," como uma forma de colocar as props de entrada na lista de permiss\xf5es. Voc\xea tamb\xe9m teria que implementar ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps"),",",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps")," e ",Object(r.b)("inlineCode",{parentName:"p"},"mergeProps")," para tamb\xe9m colocar props na lista de permiss\xf5es. (Pode ser mais simples conseguir isso de outras maneiras, por exemplo, usando ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/acdlite/recompose/blob/master/docs/API.md#mapprops"}),"recompose's mapProps"),".)"),Object(r.b)("h4",{id:"arestatepropsequal-next-object-prev-object--boolean"},Object(r.b)("inlineCode",{parentName:"h4"},"areStatePropsEqual: (next: Object, prev: Object) => boolean")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"tipo: ",Object(r.b)("inlineCode",{parentName:"li"},"function")),Object(r.b)("li",{parentName:"ul"},"valor padr\xe3o: ",Object(r.b)("inlineCode",{parentName:"li"},"shallowEqual"))),Object(r.b)("p",null,"Quando puro, compara o resultado de ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," com seu valor anterior."),Object(r.b)("h4",{id:"aremergedpropsequal-next-object-prev-object--boolean"},Object(r.b)("inlineCode",{parentName:"h4"},"areMergedPropsEqual: (next: Object, prev: Object) => boolean")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"valor padr\xe3o: ",Object(r.b)("inlineCode",{parentName:"li"},"shallowEqual"))),Object(r.b)("p",null,"Quando puro, compara o resultado de ",Object(r.b)("inlineCode",{parentName:"p"},"mergeProps")," com seu valor anterior."),Object(r.b)("p",null,"Voc\xea pode querer sobrescrever ",Object(r.b)("inlineCode",{parentName:"p"},"areStatePropsEqual")," para usar ",Object(r.b)("inlineCode",{parentName:"p"},"strictEqual")," se seu ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," usar um selector memoizado que s\xf3 retornar\xe1 um novo objeto se um prop relevante mudou. Isso seria uma pequena melhoria de desempenho, pois evitaria verifica\xe7\xf5es extras de igualdade em props individuais cada vez que ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," fosse chamado."),Object(r.b)("p",null,"Voc\xea pode querer substituir ",Object(r.b)("inlineCode",{parentName:"p"},"areMergedPropsEqual")," para implementar um ",Object(r.b)("inlineCode",{parentName:"p"},"deepEqual")," se seus selectors produzirem props complexos. ex: objetos aninhados, novas matrizes, etc. (A verifica\xe7\xe3o de igualdade profunda pode ser mais r\xe1pida do que apenas uma nova renderiza\xe7\xe3o.)"),Object(r.b)("h4",{id:"forwardref-boolean"},Object(r.b)("inlineCode",{parentName:"h4"},"forwardRef: boolean")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Nota: Este par\xe2metro \xe9 compat\xedvel com >= v6.0 apenas")),Object(r.b)("p",null,"Se ",Object(r.b)("inlineCode",{parentName:"p"},"{forwardRef: true}")," foi passado para ",Object(r.b)("inlineCode",{parentName:"p"},"connect"),", adicionar um ref ao componente envolvido conectado ir\xe1 realmente retornar a inst\xe2ncia do componente envolvido."),Object(r.b)("h2",{id:"retorno-da-connect"},"Retorno da ",Object(r.b)("inlineCode",{parentName:"h2"},"connect()")),Object(r.b)("p",null,"O retorno de ",Object(r.b)("inlineCode",{parentName:"p"},"connect()")," \xe9 uma fun\xe7\xe3o que pega seu componente e retorna um componente envolvido com as props adicionais que ele injeta."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"import { login, logout } from './actionCreators'\n\nconst mapState = state => state.user\nconst mapDispatch = { login, logout }\n\n// primeira chamada: retorna um hoc (higher order component) que voc\xea pode usar para envolver qualquer componente\nconst connectUser = connect(\n  mapState,\n  mapDispatch\n)\n\n// segunda chamada: retorna o componente wrapper com mergedProps\n// voc\xea pode usar o hoc para permitir que diferentes componentes obtenham o mesmo comportamento\nconst ConnectedUserLogin = connectUser(Login)\nconst ConnectedUserProfile = connectUser(Profile)\n")),Object(r.b)("p",null,"Na maioria dos casos, a fun\xe7\xe3o retornada ser\xe1 chamada imediatamente, sem ser salva em uma vari\xe1vel tempor\xe1ria:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"import { login, logout } from './actionCreators'\n\nconst mapState = state => state.user\nconst mapDispatch = { login, logout }\n\n// chame connect para gerar a fun\xe7\xe3o wrapper e chame imediatamente\n// a fun\xe7\xe3o wrapper para gerar o componente envolvido final.\n\nexport default connect(\n  mapState,\n  mapDispatch\n)(Login)\n")),Object(r.b)("h2",{id:"exemplo-de-uso"},"Exemplo de uso"),Object(r.b)("p",null,"Como ",Object(r.b)("inlineCode",{parentName:"p"},"connect")," \xe9 t\xe3o flex\xedvel, pode ser \xfatil ver alguns exemplos adicionais de como ela pode ser chamada:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Injete apenas ",Object(r.b)("inlineCode",{parentName:"li"},"dispatch")," e n\xe3o d\xea ouvidos a store")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"export default connect()(TodoApp)\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Injetar todos os action creators (",Object(r.b)("inlineCode",{parentName:"li"},"addTodo"),",",Object(r.b)("inlineCode",{parentName:"li"}," completeTodo"),", ...) sem assinar na store")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"import * as actionCreators from './actionCreators'\n\nexport default connect(\n  null,\n  actionCreators\n)(TodoApp)\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Injetar ",Object(r.b)("inlineCode",{parentName:"li"},"dispatch")," e todos os campos no estado global")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"N\xe3o fa\xe7a isso! Ele mata qualquer otimiza\xe7\xe3o de desempenho porque ",Object(r.b)("inlineCode",{parentName:"p"},"TodoApp")," ir\xe1 renderizar novamente ap\xf3s cada mudan\xe7a de estado.\n\xc9 melhor ter ",Object(r.b)("inlineCode",{parentName:"p"},"connect()")," mais granular em v\xe1rios componentes em sua hierarquia de visualiza\xe7\xe3o, de modo que cada um ou\xe7a apenas uma parte relevante do estado.")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"// n\xe3o fa\xe7a isso!\nexport default connect(state => state)(TodoApp)\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Injetar ",Object(r.b)("inlineCode",{parentName:"li"},"dispatch")," e ",Object(r.b)("inlineCode",{parentName:"li"},"todos"))),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"function mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nexport default connect(mapStateToProps)(TodoApp)\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Injetar ",Object(r.b)("inlineCode",{parentName:"li"},"todos")," e todos os action creators")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"import * as actionCreators from './actionCreators'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nexport default connect(\n  mapStateToProps,\n  actionCreators\n)(TodoApp)\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Injetar ",Object(r.b)("inlineCode",{parentName:"li"},"todos")," e todos os action creators (",Object(r.b)("inlineCode",{parentName:"li"},"addTodo"),", ",Object(r.b)("inlineCode",{parentName:"li"},"completeTodo"),", ...) como ",Object(r.b)("inlineCode",{parentName:"li"},"actions"))),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"import * as actionCreators from './actionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return { actions: bindActionCreators(actionCreators, dispatch) }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoApp)\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Injetar ",Object(r.b)("inlineCode",{parentName:"li"},"todos")," e um action creator espec\xedfico (",Object(r.b)("inlineCode",{parentName:"li"}," addTodo"),")")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"import { addTodo } from './actionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ addTodo }, dispatch)\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoApp)\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Injetar ",Object(r.b)("inlineCode",{parentName:"li"},"todos")," e action creators espec\xedficos (",Object(r.b)("inlineCode",{parentName:"li"},"addTodo")," e ",Object(r.b)("inlineCode",{parentName:"li"},"deleteTodo"),") com sintaxe abreviada")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"import { addTodo, deleteTodo } from './actionCreators'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nconst mapDispatchToProps = {\n  addTodo,\n  deleteTodo\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoApp)\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Injetar ",Object(r.b)("inlineCode",{parentName:"li"},"todos"),",",Object(r.b)("inlineCode",{parentName:"li"}," todoActionCreators")," como ",Object(r.b)("inlineCode",{parentName:"li"},"todoActions")," e ",Object(r.b)("inlineCode",{parentName:"li"},"counterActionCreators")," como ",Object(r.b)("inlineCode",{parentName:"li"},"counterActions"))),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"import * as todoActionCreators from './todoActionCreators'\nimport * as counterActionCreators from './counterActionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    todoActions: bindActionCreators(todoActionCreators, dispatch),\n    counterActions: bindActionCreators(counterActionCreators, dispatch)\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoApp)\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Injetar ",Object(r.b)("inlineCode",{parentName:"li"},"todos"),", todoActionCreators e counterActionCreators juntos como ",Object(r.b)("inlineCode",{parentName:"li"},"actions"))),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"import * as todoActionCreators from './todoActionCreators'\nimport * as counterActionCreators from './counterActionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(\n      { ...todoActionCreators, ...counterActionCreators },\n      dispatch\n    )\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoApp)\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Injetar ",Object(r.b)("inlineCode",{parentName:"li"},"todos")," e todos os ",Object(r.b)("inlineCode",{parentName:"li"},"todoActionCreators")," e ",Object(r.b)("inlineCode",{parentName:"li"},"counterActionCreators")," diretamente como props")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"import * as todoActionCreators from './todoActionCreators'\nimport * as counterActionCreators from './counterActionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    { ...todoActionCreators, ...counterActionCreators },\n    dispatch\n  )\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoApp)\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Injetar ",Object(r.b)("inlineCode",{parentName:"li"},"todos")," de um usu\xe1rio espec\xedfico dependendo das props")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"import * as actionCreators from './actionCreators'\n\nfunction mapStateToProps(state, ownProps) {\n  return { todos: state.todos[ownProps.userId] }\n}\n\nexport default connect(mapStateToProps)(TodoApp)\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Injetar ",Object(r.b)("inlineCode",{parentName:"li"},"todos")," de um usu\xe1rio espec\xedfico dependendo dos props e injetar ",Object(r.b)("inlineCode",{parentName:"li"},"props.userId")," na action")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"import * as actionCreators from './actionCreators'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mergeProps(stateProps, dispatchProps, ownProps) {\n  return Object.assign({}, ownProps, {\n    todos: stateProps.todos[ownProps.userId],\n    addTodo: text => dispatchProps.addTodo(ownProps.userId, text)\n  })\n}\n\nexport default connect(\n  mapStateToProps,\n  actionCreators,\n  mergeProps\n)(TodoApp)\n")),Object(r.b)("h2",{id:"notas"},"Notas"),Object(r.b)("h3",{id:"a-aridade-das-fun\xe7\xf5es-maptoprops"},"A Aridade das Fun\xe7\xf5es ",Object(r.b)("inlineCode",{parentName:"h3"},"mapToProps")),Object(r.b)("p",null,"O n\xfamero de par\xe2metros de fun\xe7\xe3o declarados de ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," e ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps")," determina se eles recebem ",Object(r.b)("inlineCode",{parentName:"p"},"ownProps")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Nota: ",Object(r.b)("inlineCode",{parentName:"p"},"ownProps")," n\xe3o \xe9 passado para ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," e ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps")," se a defini\xe7\xe3o formal da fun\xe7\xe3o cont\xe9m um par\xe2metro obrigat\xf3rio (fun\xe7\xe3o tem comprimento 1). Por exemplo, fun\xe7\xf5es definidas como abaixo n\xe3o receber\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"ownProps")," como o segundo argumento. Se o valor de entrada de ",Object(r.b)("inlineCode",{parentName:"p"},"ownProps")," for ",Object(r.b)("inlineCode",{parentName:"p"},"undefined"),", o valor do argumento padr\xe3o ser\xe1 usado.")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"function mapStateToProps(state) {\n  console.log(state) // state\n  console.log(arguments[1]) // undefined\n}\n\nconst mapStateToProps = (state, ownProps = {}) => {\n  console.log(state) // state\n  console.log(ownProps) // {}\n}\n")),Object(r.b)("p",null,"Fun\xe7\xf5es sem par\xe2metros obrigat\xf3rios ou dois par\xe2metros","*","receber\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"ownProps"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"const mapStateToProps = (state, ownProps) => {\n  console.log(state) // state\n  console.log(ownProps) // ownProps\n}\n\nfunction mapStateToProps() {\n  console.log(arguments[0]) // state\n  console.log(arguments[1]) // ownProps\n}\n\nconst mapStateToProps = (...args) => {\n  console.log(args[0]) // state\n  console.log(args[1]) // ownProps\n}\n")),Object(r.b)("h3",{id:"factory-functions"},"Factory Functions"),Object(r.b)("p",null,"If your ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," or ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps")," functions return a function, they will be called once when the component instantiates, and their returns will be used as the actual ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps"),", ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps"),", functions respectively, in their subsequent calls.\nSe suas fun\xe7\xf5es ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," ou ",Object(r.b)("inlineCode",{parentName:"p"},"mapDispatchToProps")," retornarem uma fun\xe7\xe3o, elas ser\xe3o chamadas uma vez quando o componente instanciar, e seus retornos ser\xe3o usados \u200b\u200bcomo as fun\xe7\xf5es reais ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps"),",",Object(r.b)("inlineCode",{parentName:"p"}," mapDispatchToProps")," respectivamente, em suas chamadas subsequentes."),Object(r.b)("p",null,"As factory functions s\xe3o comumente usadas com selectors memoizados. Isso d\xe1 a voc\xea a capacidade de criar selectors espec\xedficos de inst\xe2ncia de componente dentro do closure:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"const makeUniqueSelectorInstance = () =>\n  createSelector(\n    [selectItems, selectItemId],\n    (items, itemId) => items[itemId]\n  )\nconst makeMapState = state => {\n  const selectItemForThisComponent = makeUniqueSelectorInstance()\n  return function realMapState(state, ownProps) {\n    const item = selectItemForThisComponent(state, ownProps.itemId)\n    return { item }\n  }\n}\nexport default connect(makeMapState)(SomeComponent)\n")))}b.isMDXComponent=!0},147:function(e,o,a){"use strict";a.d(o,"a",(function(){return d})),a.d(o,"b",(function(){return u}));var t=a(0),n=a.n(t);function r(e,o,a){return o in e?Object.defineProperty(e,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[o]=a,e}function p(e,o){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);o&&(t=t.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),a.push.apply(a,t)}return a}function c(e){for(var o=1;o<arguments.length;o++){var a=null!=arguments[o]?arguments[o]:{};o%2?p(Object(a),!0).forEach((function(o){r(e,o,a[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):p(Object(a)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(a,o))}))}return e}function s(e,o){if(null==e)return{};var a,t,n=function(e,o){if(null==e)return{};var a,t,n={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],o.indexOf(a)>=0||(n[a]=e[a]);return n}(e,o);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],o.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=n.a.createContext({}),b=function(e){var o=n.a.useContext(i),a=o;return e&&(a="function"==typeof e?e(o):c(c({},o),e)),a},d=function(e){var o=b(e.components);return n.a.createElement(i.Provider,{value:o},e.children)},l={inlineCode:"code",wrapper:function(e){var o=e.children;return n.a.createElement(n.a.Fragment,{},o)}},m=n.a.forwardRef((function(e,o){var a=e.components,t=e.mdxType,r=e.originalType,p=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),d=b(a),m=t,u=d["".concat(p,".").concat(m)]||d[m]||l[m]||r;return a?n.a.createElement(u,c(c({ref:o},i),{},{components:a})):n.a.createElement(u,c({ref:o},i))}));function u(e,o){var a=arguments,t=o&&o.mdxType;if("string"==typeof e||t){var r=a.length,p=new Array(r);p[0]=m;var c={};for(var s in o)hasOwnProperty.call(o,s)&&(c[s]=o[s]);c.originalType=e,c.mdxType="string"==typeof e?e:t,p[1]=c;for(var i=2;i<r;i++)p[i]=a[i];return n.a.createElement.apply(null,p)}return n.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);