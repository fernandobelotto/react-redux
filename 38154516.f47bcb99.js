(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{147:function(e,a,o){"use strict";o.d(a,"a",(function(){return i})),o.d(a,"b",(function(){return u}));var t=o(0),n=o.n(t);function r(e,a,o){return a in e?Object.defineProperty(e,a,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[a]=o,e}function s(e,a){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),o.push.apply(o,t)}return o}function p(e){for(var a=1;a<arguments.length;a++){var o=null!=arguments[a]?arguments[a]:{};a%2?s(Object(o),!0).forEach((function(a){r(e,a,o[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(o,a))}))}return e}function c(e,a){if(null==e)return{};var o,t,n=function(e,a){if(null==e)return{};var o,t,n={},r=Object.keys(e);for(t=0;t<r.length;t++)o=r[t],a.indexOf(o)>=0||(n[o]=e[o]);return n}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)o=r[t],a.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var d=n.a.createContext({}),m=function(e){var a=n.a.useContext(d),o=a;return e&&(o="function"==typeof e?e(a):p(p({},a),e)),o},i=function(e){var a=m(e.components);return n.a.createElement(d.Provider,{value:a},e.children)},l={inlineCode:"code",wrapper:function(e){var a=e.children;return n.a.createElement(n.a.Fragment,{},a)}},b=n.a.forwardRef((function(e,a){var o=e.components,t=e.mdxType,r=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),i=m(o),b=t,u=i["".concat(s,".").concat(b)]||i[b]||l[b]||r;return o?n.a.createElement(u,p(p({ref:a},d),{},{components:o})):n.a.createElement(u,p({ref:a},d))}));function u(e,a){var o=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var r=o.length,s=new Array(r);s[0]=b;var p={};for(var c in a)hasOwnProperty.call(a,c)&&(p[c]=a[c]);p.originalType=e,p.mdxType="string"==typeof e?e:t,s[1]=p;for(var d=2;d<r;d++)s[d]=o[d];return n.a.createElement.apply(null,s)}return n.a.createElement.apply(null,o)}b.displayName="MDXCreateElement"},79:function(e,a,o){"use strict";o.r(a),o.d(a,"frontMatter",(function(){return s})),o.d(a,"metadata",(function(){return p})),o.d(a,"rightToc",(function(){return c})),o.d(a,"default",(function(){return m}));var t=o(2),n=o(6),r=(o(0),o(147)),s={id:"connect-mapstate",title:"Connect: Extraindo dados com mapStateToProps",hide_title:!0,sidebar_label:"Connect: Extraindo dados com mapStateToProps"},p={unversionedId:"using-react-redux/connect-mapstate",id:"version-7.2/using-react-redux/connect-mapstate",isDocsHomePage:!1,title:"Connect: Extraindo dados com mapStateToProps",description:"Connect: Extraindo dados com mapStateToProps",source:"@site/versioned_docs\\version-7.2\\using-react-redux\\connect-extracting-data-with-mapStateToProps.md",slug:"/using-react-redux/connect-mapstate",permalink:"/react-redux/using-react-redux/connect-mapstate",version:"7.2",sidebar_label:"Connect: Extraindo dados com mapStateToProps",sidebar:"version-7.2/docs",previous:{title:"Por que usar React Redux?",permalink:"/react-redux/introduction/why-use-react-redux"},next:{title:"Connect: Despachando Actions com mapDispatchToProps",permalink:"/react-redux/using-react-redux/connect-mapdispatch"}},c=[{value:"Definindo <code>mapStateToProps</code>",id:"definindo-mapstatetoprops",children:[{value:"Argumentos",id:"argumentos",children:[]},{value:"Retorno",id:"retorno",children:[]}]},{value:"Diretrizes de uso",id:"diretrizes-de-uso",children:[{value:"Deixar <code>mapStateToProps</code> remodelar os dados da store",id:"deixar-mapstatetoprops-remodelar-os-dados-da-store",children:[]},{value:"Use fun\xe7\xf5es selectors para extrair e transformar dados",id:"use-fun\xe7\xf5es-selectors-para-extrair-e-transformar-dados",children:[]},{value:"Fun\xe7\xf5es <code>mapStateToProps</code> devem ser r\xe1pidas",id:"fun\xe7\xf5es-mapstatetoprops-devem-ser-r\xe1pidas",children:[]},{value:"Fun\xe7\xf5es <code>mapStateToProps</code> devem ser puras e s\xedncronas",id:"fun\xe7\xf5es-mapstatetoprops-devem-ser-puras-e-s\xedncronas",children:[]}]},{value:"<code>mapStateToProps</code> e Desempenho",id:"mapstatetoprops-e-desempenho",children:[{value:"Valores de retorno determinam se seu componente \xe9 renderizado novamente",id:"valores-de-retorno-determinam-se-seu-componente-\xe9-renderizado-novamente",children:[]},{value:"Retorne apenas refer\xeancias de novos objetos se necess\xe1rio",id:"retorne-apenas-refer\xeancias-de-novos-objetos-se-necess\xe1rio",children:[]},{value:"Somente execute opera\xe7\xf5es pesadas quando os dados forem alterados",id:"somente-execute-opera\xe7\xf5es-pesadas-quando-os-dados-forem-alterados",children:[]}]},{value:"Comportamento e pegadinhas",id:"comportamento-e-pegadinhas",children:[{value:"<code>mapStateToProps</code> n\xe3o ser\xe1 executado se o estado da store for o mesmo",id:"mapstatetoprops-n\xe3o-ser\xe1-executado-se-o-estado-da-store-for-o-mesmo",children:[]},{value:"O n\xfamero de argumentos declarados afeta o comportamento",id:"o-n\xfamero-de-argumentos-declarados-afeta-o-comportamento",children:[]}]},{value:"Links e refer\xeancias",id:"links-e-refer\xeancias",children:[]}],d={rightToc:c};function m(e){var a=e.components,o=Object(n.a)(e,["components"]);return Object(r.b)("wrapper",Object(t.a)({},d,o,{components:a,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"connect-extraindo-dados-com-mapstatetoprops"},"Connect: Extraindo dados com ",Object(r.b)("inlineCode",{parentName:"h1"},"mapStateToProps")),Object(r.b)("p",null,"Como o primeiro argumento passado para ",Object(r.b)("inlineCode",{parentName:"p"},"connect"),",",Object(r.b)("inlineCode",{parentName:"p"}," mapStateToProps")," \xe9 usado para selecionar a parte dos dados do armazenamento que o componente conectado precisa. \xc9 frequentemente referido apenas como ",Object(r.b)("inlineCode",{parentName:"p"},"mapState")," para abrevia\xe7\xe3o."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"\xc9 chamado sempre que o estado da store muda."),Object(r.b)("li",{parentName:"ul"},"Recebe todo o estado da store e deve retornar um objeto de dados de que esse componente precisa.")),Object(r.b)("h2",{id:"definindo-mapstatetoprops"},"Definindo ",Object(r.b)("inlineCode",{parentName:"h2"},"mapStateToProps")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," deve ser definido como uma fun\xe7\xe3o:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"function mapStateToProps(state, ownProps?)\n")),Object(r.b)("p",null,"Deve receber um primeiro argumento chamado ",Object(r.b)("inlineCode",{parentName:"p"},"state"),", opcionalmente um segundo argumento chamado ",Object(r.b)("inlineCode",{parentName:"p"},"ownProps"),", e retornar um objeto simples contendo os dados que o componente conectado precisa."),Object(r.b)("p",null,"Esta fun\xe7\xe3o deve ser passada como o primeiro argumento para ",Object(r.b)("inlineCode",{parentName:"p"},"connect"),", e ser\xe1 chamada toda vez que o estado da Redux store mudar. Se voc\xea n\xe3o deseja assinar a store, passe ",Object(r.b)("inlineCode",{parentName:"p"},"null")," ou ",Object(r.b)("inlineCode",{parentName:"p"},"undefined")," para ",Object(r.b)("inlineCode",{parentName:"p"},"connect")," no lugar de",Object(r.b)("inlineCode",{parentName:"p"}," mapStateToProps"),"."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"N\xe3o importa se uma fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"strong"},"mapStateToProps")," \xe9 escrita usando a palavra-chave ",Object(r.b)("inlineCode",{parentName:"strong"},"function")," (",Object(r.b)("inlineCode",{parentName:"strong"},"function mapState(state) {}"),") ou como uma arrow function (",Object(r.b)("inlineCode",{parentName:"strong"},"const mapState = (state) => {}"),")")," - ambas as formas funcionar\xe3o."),Object(r.b)("h3",{id:"argumentos"},"Argumentos"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"state"))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"ownProps")," (opicional)"))),Object(r.b)("h4",{id:"state"},Object(r.b)("inlineCode",{parentName:"h4"},"state")),Object(r.b)("p",null,"O primeiro argumento para uma fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," \xe9 todo o estado da Redux store (o mesmo valor retornado por uma chamada para ",Object(r.b)("inlineCode",{parentName:"p"},"store.getState()"),"). Por causa disso, o primeiro argumento \xe9 tradicionalmente chamado apenas de ",Object(r.b)("inlineCode",{parentName:"p"},"estado"),". (Embora voc\xea possa dar ao argumento o nome que quiser, cham\xe1-lo de ",Object(r.b)("inlineCode",{parentName:"p"},"store"),' seria incorreto - \xe9 o "valor do estado", n\xe3o a "inst\xe2ncia da store".)'),Object(r.b)("p",null,"A fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," deve sempre ser escrita com pelo menos passando ",Object(r.b)("inlineCode",{parentName:"p"},"state"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"// TodoList.js\n\nfunction mapStateToProps(state) {\n  const { todos } = state\n  return { todoList: todos.allIds }\n}\n\nexport default connect(mapStateToProps)(TodoList)\n")),Object(r.b)("h4",{id:"ownprops-opicional"},Object(r.b)("inlineCode",{parentName:"h4"},"ownProps")," (opicional)"),Object(r.b)("p",null,"Voc\xea pode definir a fun\xe7\xe3o com um segundo argumento, ",Object(r.b)("inlineCode",{parentName:"p"},"ownProps"),",se o seu componente precisa dos dados de seus pr\xf3prios props para recuperar dados do armazenamento. Este argumento conter\xe1 todos os props dados ao componente wrapper que foi gerado pela ",Object(r.b)("inlineCode",{parentName:"p"},"connect"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"// Todo.js\n\nfunction mapStateToProps(state, ownProps) {\n  const { visibilityFilter } = state\n  const { id } = ownProps\n  const todo = getTodoById(state, id)\n\n  // componente recebe adicionalmente:\n  return { todo, visibilityFilter }\n}\n\n// Posteriormente, em seu aplicativo, um componente pai renderiza:\n;<ConnectedTodo id={123} />\n// e seu componente recebe props.id, props.todo e props.visibilityFilter\n")),Object(r.b)("p",null,"Voc\xea n\xe3o precisa incluir valores de ",Object(r.b)("inlineCode",{parentName:"p"},"ownProps")," no objeto retornado de ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps"),". ",Object(r.b)("inlineCode",{parentName:"p"},"connect")," ir\xe1 automaticamente mesclar essas fontes de props diferentes em um conjunto final de props."),Object(r.b)("h3",{id:"retorno"},"Retorno"),Object(r.b)("p",null,"Sua fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," deve retornar um objeto simples que cont\xe9m os dados de que o componente precisa:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Cada campo no objeto se tornar\xe1 um prop para seu componente atual"),Object(r.b)("li",{parentName:"ul"},"Os valores nos campos ser\xe3o usados \u200b\u200bpara determinar se seu componente precisa ser renderizado novamente")),Object(r.b)("p",null,"Por exemplo:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"function mapStateToProps(state) {\n  return {\n    a: 42,\n    todos: state.todos,\n    filter: state.visibilityFilter\n  }\n}\n\n// componente ir\xe1 receber: props.a, props.todos, and props.filter\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Nota: Em cen\xe1rios avan\xe7ados onde voc\xea precisa de mais controle sobre o desempenho de renderiza\xe7\xe3o, ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," tamb\xe9m pode retornar uma fun\xe7\xe3o. Nesse caso, essa fun\xe7\xe3o ser\xe1 usada como o ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," final para uma inst\xe2ncia de componente particular. Isso permite que voc\xea fa\xe7a memoiza\xe7\xe3o por inst\xe2ncia. Consulte a se\xe7\xe3o ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"./"}),"Uso avan\xe7ado")," da documenta\xe7\xe3o para obter mais detalhes, bem como o ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/reduxjs/react-redux/pull/279"}),"PR #279")," e os testes que ele adiciona. A maioria dos aplicativos nunca precisar\xe1 disso.")),Object(r.b)("h2",{id:"diretrizes-de-uso"},"Diretrizes de uso"),Object(r.b)("h3",{id:"deixar-mapstatetoprops-remodelar-os-dados-da-store"},"Deixar ",Object(r.b)("inlineCode",{parentName:"h3"},"mapStateToProps")," remodelar os dados da store"),Object(r.b)("p",null,"As fun\xe7\xf5es ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," podem, e devem, fazer muito mais do que apenas ",Object(r.b)("inlineCode",{parentName:"p"},"return state.someSlice"),". ",Object(r.b)("strong",{parentName:"p"},'Eles t\xeam a responsabilidade de "remodelar" os dados da store conforme necess\xe1rio para esse componente.')," Isso pode incluir retornar um valor como um nome de prop espec\xedfico, combinar peda\xe7os de dados de diferentes partes da \xe1rvore de estado e transformar os dados da store de maneiras diferentes."),Object(r.b)("h3",{id:"use-fun\xe7\xf5es-selectors-para-extrair-e-transformar-dados"},"Use fun\xe7\xf5es selectors para extrair e transformar dados"),Object(r.b)("p",null,'N\xf3s encorajamos o uso de fun\xe7\xf5es "seletoras" para ajudar a encapsular o processo de extra\xe7\xe3o de valores de locais espec\xedficos na \xe1rvore de estado. As fun\xe7\xf5es selectors memorizadas tamb\xe9m desempenham um papel importante na melhoria do desempenho do aplicativo (consulte as seguintes se\xe7\xf5es nesta p\xe1gina e a p\xe1gina ',"[Uso avan\xe7ado: Desempenho]","\u200b\u200b(./) para obter mais detalhes sobre por que e como usar os selectors.)"),Object(r.b)("h3",{id:"fun\xe7\xf5es-mapstatetoprops-devem-ser-r\xe1pidas"},"Fun\xe7\xf5es ",Object(r.b)("inlineCode",{parentName:"h3"},"mapStateToProps")," devem ser r\xe1pidas"),Object(r.b)("p",null,"Sempre que a store muda, todas as fun\xe7\xf5es ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," de todos os componentes conectados ser\xe3o executadas. Por causa disso, suas fun\xe7\xf5es ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," devem ser executadas o mais r\xe1pido poss\xedvel. Isso tamb\xe9m significa que uma fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," lenta pode ser um gargalo potencial para seu aplicativo."),Object(r.b)("p",null,'Como parte da ideia de "remodelar dados", as fun\xe7\xf5es ',Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," frequentemente precisam transformar dados de v\xe1rias maneiras (como filtrar uma matriz, mapear uma matriz de IDs para seus objetos correspondentes ou extrair valores JS simples de objectos do Immutable.js). Essas transforma\xe7\xf5es geralmente podem ser caras, tanto em termos de custo para executar a transforma\xe7\xe3o, quanto se o componente \xe9 renderizado novamente como resultado. Se o desempenho for uma preocupa\xe7\xe3o, certifique-se de que essas transforma\xe7\xf5es sejam executadas apenas se os valores de entrada forem alterados."),Object(r.b)("h3",{id:"fun\xe7\xf5es-mapstatetoprops-devem-ser-puras-e-s\xedncronas"},"Fun\xe7\xf5es ",Object(r.b)("inlineCode",{parentName:"h3"},"mapStateToProps")," devem ser puras e s\xedncronas"),Object(r.b)("p",null,"Assim como um reducer do Redux, uma fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," deve ser sempre 100% pura e s\xedncrona. Deve simplesmente receber ",Object(r.b)("inlineCode",{parentName:"p"},"state")," (e",Object(r.b)("inlineCode",{parentName:"p"}," ownProps"),") como argumentos e retornar os dados que o componente precisa como props. Ela ",Object(r.b)("em",{parentName:"p"},"n\xe3o")," deve ser usada para acionar comportamento ass\xedncrono como chamadas AJAX para obten\xe7\xe3o de dados, e as fun\xe7\xf5es n\xe3o devem ser declaradas como ",Object(r.b)("inlineCode",{parentName:"p"},"async"),"."),Object(r.b)("h2",{id:"mapstatetoprops-e-desempenho"},Object(r.b)("inlineCode",{parentName:"h2"},"mapStateToProps")," e Desempenho"),Object(r.b)("h3",{id:"valores-de-retorno-determinam-se-seu-componente-\xe9-renderizado-novamente"},"Valores de retorno determinam se seu componente \xe9 renderizado novamente"),Object(r.b)("p",null,"O React Redux implementa internamente o m\xe9todo ",Object(r.b)("inlineCode",{parentName:"p"},"shouldComponentUpdate"),", de forma que o componente que envolve seja renderizado novamente exatamente quando os dados de que o seu componente precisa foram alterados. Por padr\xe3o, React Redux decide se o conte\xfado do objeto retornado de ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," \xe9 diferente usando a compara\xe7\xe3o",Object(r.b)("inlineCode",{parentName:"p"},"==="),'(uma verifica\xe7\xe3o de "igualdade superficial") em cada campo do objeto retornado. Se algum dos campos foi alterado, seu componente ser\xe1 renderizado novamente para que possa receber os valores atualizados como props. Observe que retornar um objeto mutado da mesma refer\xeancia \xe9 um erro comum que pode fazer com que seu componente n\xe3o seja renderizado novamente quando esperado.'),Object(r.b)("p",null,"To summarize the behavior of the component wrapped by ",Object(r.b)("inlineCode",{parentName:"p"},"connect")," with ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," to extract data from the store:\nPara resumir o comportamento do componente encapsulado por ",Object(r.b)("inlineCode",{parentName:"p"},"connect")," com",Object(r.b)("inlineCode",{parentName:"p"}," mapStateToProps")," para extrair dados do armazenamento:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(t.a)({parentName:"tr"},{align:null})),Object(r.b)("th",Object(t.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"th"},"(state) => stateProps")),Object(r.b)("th",Object(t.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"th"},"(state, ownProps) => stateProps")))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(t.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"mapStateToProps")," executa quando:"),Object(r.b)("td",Object(t.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"state")," da store muda"),Object(r.b)("td",Object(t.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"state")," da store muda ",Object(r.b)("br",null)," ou ",Object(r.b)("br",null),"qualquer campo de ",Object(r.b)("inlineCode",{parentName:"td"},"ownProps")," \xe9 diferente")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(t.a)({parentName:"tr"},{align:null}),"componente \xe9 renderizado novamente quando:"),Object(r.b)("td",Object(t.a)({parentName:"tr"},{align:null}),"qualquer campo de ",Object(r.b)("inlineCode",{parentName:"td"},"stateProps")," \xe9 diferente"),Object(r.b)("td",Object(t.a)({parentName:"tr"},{align:null}),"qualquer campo de ",Object(r.b)("inlineCode",{parentName:"td"},"stateProps")," \xe9 diferente ",Object(r.b)("br",null)," ou ",Object(r.b)("br",null)," qualquer campo de ",Object(r.b)("inlineCode",{parentName:"td"},"ownProps")," \xe9 diferente")))),Object(r.b)("h3",{id:"retorne-apenas-refer\xeancias-de-novos-objetos-se-necess\xe1rio"},"Retorne apenas refer\xeancias de novos objetos se necess\xe1rio"),Object(r.b)("p",null,"React Redux faz compara\xe7\xf5es superficiais para ver se os resultados de ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," mudaram. \xc9 f\xe1cil retornar acidentalmente um novo objeto ou refer\xeancias de array todas as vezes, o que faria com que seu componente fosse renderizado novamente, mesmo se os dados fossem realmente os mesmos."),Object(r.b)("p",null,"Muitas opera\xe7\xf5es comuns resultam na cria\xe7\xe3o de novas refer\xeancias objetos ou arrays:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Criando novos arrays com ",Object(r.b)("inlineCode",{parentName:"li"},"someArray.map ()")," ou ",Object(r.b)("inlineCode",{parentName:"li"},"someArray.filter()")),Object(r.b)("li",{parentName:"ul"},"Mesclando arrays com ",Object(r.b)("inlineCode",{parentName:"li"},"array.concat")),Object(r.b)("li",{parentName:"ul"},"Sele\xe7\xe3o de parte de uma array com ",Object(r.b)("inlineCode",{parentName:"li"},"array.slice")),Object(r.b)("li",{parentName:"ul"},"Copiar valores com ",Object(r.b)("inlineCode",{parentName:"li"},"Object.assign")),Object(r.b)("li",{parentName:"ul"},"Copiar valores com o operador spread ",Object(r.b)("inlineCode",{parentName:"li"},"{... oldState, ... newData}"))),Object(r.b)("p",null,"Coloque essas opera\xe7\xf5es em ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"https://redux.js.org/recipes/computing-derived-data#creating-a-memoized-selector"}),"fun\xe7\xf5es selectors memoizadas")," para garantir que elas sejam executadas apenas se os valores de entrada forem alterados. Isso tamb\xe9m garantir\xe1 que se os valores de entrada ",Object(r.b)("em",{parentName:"p"},"n\xe3o mudarem"),", ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," ainda retornar\xe1 os mesmos valores de resultado de antes, e ",Object(r.b)("inlineCode",{parentName:"p"},"connect")," pode pular a re-renderiza\xe7\xe3o."),Object(r.b)("h3",{id:"somente-execute-opera\xe7\xf5es-pesadas-quando-os-dados-forem-alterados"},"Somente execute opera\xe7\xf5es pesadas quando os dados forem alterados"),Object(r.b)("p",null,"Transformar dados geralmente pode ser caro (",Object(r.b)("em",{parentName:"p"},"e")," geralmente resulta na cria\xe7\xe3o de novas refer\xeancias de objeto). Para que sua fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," seja a mais r\xe1pido poss\xedvel, voc\xea s\xf3 deve executar novamente essas transforma\xe7\xf5es complexas quando os dados relevantes forem alterados."),Object(r.b)("p",null,"Existem algumas maneiras de abordar isso:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Algumas transforma\xe7\xf5es podem ser calculadas em um action creator ou reducer, e os dados transformados podem ser mantidos na store"),Object(r.b)("li",{parentName:"ul"},"As transforma\xe7\xf5es tamb\xe9m podem ser feitas no m\xe9todo ",Object(r.b)("inlineCode",{parentName:"li"},"render ()")," de um componente"),Object(r.b)("li",{parentName:"ul"},"Se a transforma\xe7\xe3o precisa ser feita em uma fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"li"},"mapStateToProps"),", ent\xe3o recomendamos o uso de ",Object(r.b)("a",Object(t.a)({parentName:"li"},{href:"https://redux.js.org/recipes/computing-derived-data#creating-a-memoized-seletor"}),"fun\xe7\xf5es selectors memoizadas")," para garantir que a transforma\xe7\xe3o seja executada apenas quando os valores de entrada forem alterados.")),Object(r.b)("h4",{id:"preocupa\xe7\xf5es-com-o-desempenho-de-immutablejs"},"Preocupa\xe7\xf5es com o desempenho de Immutable.js"),Object(r.b)("p",null,"Lee Byron, autor do Immutable.js, no Twitter ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"https://twitter.com/leeb/status/746733697093668864?lang=en"}),"aconselha explicitamente a evitar ",Object(r.b)("inlineCode",{parentName:"a"},"toJS")," quando o desempenho for uma preocupa\xe7\xe3o"),":"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Perf tip for #immutablejs: avoid .toJS() .toObject() and .toArray() all slow full-copy operations which render structural sharing useless.")),Object(r.b)("p",null,"Existem v\xe1rias outras quest\xf5es de desempenho a serem levadas em considera\xe7\xe3o com Immutable.js - consulte a lista de links no final desta p\xe1gina para obter mais informa\xe7\xf5es."),Object(r.b)("h2",{id:"comportamento-e-pegadinhas"},"Comportamento e pegadinhas"),Object(r.b)("h3",{id:"mapstatetoprops-n\xe3o-ser\xe1-executado-se-o-estado-da-store-for-o-mesmo"},Object(r.b)("inlineCode",{parentName:"h3"},"mapStateToProps")," n\xe3o ser\xe1 executado se o estado da store for o mesmo"),Object(r.b)("p",null,"O componente que envolve gerado por ",Object(r.b)("inlineCode",{parentName:"p"},"connect")," assina a Redux store. Cada vez que uma action \xe9 despachada, ela chama ",Object(r.b)("inlineCode",{parentName:"p"},"store.getState ()")," e verifica se ",Object(r.b)("inlineCode",{parentName:"p"},"lastState === currentState"),". Se os dois valores de estado s\xe3o id\xeanticos por refer\xeancia, ent\xe3o ele ",Object(r.b)("em",{parentName:"p"},"n\xe3o")," reexecutar\xe1 sua fun\xe7\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps"),", porque assume que o resto do estado de armazenamento tamb\xe9m n\xe3o mudou."),Object(r.b)("p",null,"A fun\xe7\xe3o de utilidade ",Object(r.b)("inlineCode",{parentName:"p"},"combineReducers")," do Redux tenta otimizar para isso. Se nenhum dos reducers de slice retornou um novo valor, ent\xe3o ",Object(r.b)("inlineCode",{parentName:"p"},"combineReducers")," retornar\xe1 o objeto de estado antigo em vez de um novo. Isso significa que a muta\xe7\xe3o em um reducer pode fazer com que o objeto de estado raiz n\xe3o seja atualizado e, portanto, a UI n\xe3o ser\xe1 renderizada novamente."),Object(r.b)("h3",{id:"o-n\xfamero-de-argumentos-declarados-afeta-o-comportamento"},"O n\xfamero de argumentos declarados afeta o comportamento"),Object(r.b)("p",null,"Com apenas ",Object(r.b)("inlineCode",{parentName:"p"},"(state)"),", a fun\xe7\xe3o \xe9 executada sempre que o objeto de estado da store raiz for diferente. Com ",Object(r.b)("inlineCode",{parentName:"p"},"(state, ownProps)"),", ele roda sempre que o estado da store for diferente e TAMB\xc9M sempre que as propriedades do wraper forem alteradas."),Object(r.b)("p",null,"Isso significa que ",Object(r.b)("strong",{parentName:"p"},"voc\xea n\xe3o deve adicionar o argumento ",Object(r.b)("inlineCode",{parentName:"strong"},"ownProps")," a menos que voc\xea realmente precise us\xe1-lo"),", ou sua fun\xe7\xe3o",Object(r.b)("inlineCode",{parentName:"p"}," mapStateToProps")," ser\xe1 executada com mais freq\xfc\xeancia do que o necess\xe1rio."),Object(r.b)("p",null,"Existem alguns casos extremos em torno desse comportamento. ",Object(r.b)("strong",{parentName:"p"},"O n\xfamero de argumentos obrigat\xf3rios determina se ",Object(r.b)("inlineCode",{parentName:"strong"},"mapStateToProps")," receber\xe1",Object(r.b)("inlineCode",{parentName:"strong"}," ownProps")),"."),Object(r.b)("p",null,"Se a defini\xe7\xe3o formal da fun\xe7\xe3o cont\xe9m um par\xe2metro obrigat\xf3rio, ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," ",Object(r.b)("em",{parentName:"p"},"n\xe3o")," receber\xe1",Object(r.b)("inlineCode",{parentName:"p"}," ownProps"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"function mapStateToProps(state) {\n  console.log(state) // state\n  console.log(arguments[1]) // undefined\n}\nconst mapStateToProps = (state, ownProps = {}) => {\n  console.log(state) // state\n  console.log(ownProps) // undefined\n}\n")),Object(r.b)("p",null,"Ele ",Object(r.b)("em",{parentName:"p"},"receber\xe1")," ",Object(r.b)("inlineCode",{parentName:"p"},"ownProps")," quando a defini\xe7\xe3o formal da fun\xe7\xe3o contiver zero ou dois par\xe2metros obrigat\xf3rios:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"function mapStateToProps(state, ownProps) {\n  console.log(state) // state\n  console.log(ownProps) // ownProps\n}\n\nfunction mapStateToProps() {\n  console.log(arguments[0]) // state\n  console.log(arguments[1]) // ownProps\n}\n\nfunction mapStateToProps(...args) {\n  console.log(args[0]) // state\n  console.log(args[1]) // ownProps\n}\n")),Object(r.b)("h2",{id:"links-e-refer\xeancias"},"Links e refer\xeancias"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Tutoriais")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(t.a)({parentName:"li"},{href:"https://blog.isquaredsoftware.com/2017/01/practical-redux-part-6-connected-lists-forms-and-performance/"}),"Practical Redux Series, Part 6: Connected Lists, Forms, and Performance")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(t.a)({parentName:"li"},{href:"https://blog.isquaredsoftware.com/2017/12/idiomatic-redux-using-reselect-selectors/"}),"Redux Idiom\xe1tico: Usando Reselect Selectors para encapsulamento e desempenho"))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Desempenho")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(t.a)({parentName:"li"},{href:"https://twitter.com/leeb/status/746733697093668864"}),"Tweet de Lee Byron sugerindo evitar ",Object(r.b)("inlineCode",{parentName:"a"},"toJS"),",",Object(r.b)("inlineCode",{parentName:"a"}," toArray")," e ",Object(r.b)("inlineCode",{parentName:"a"},"toObject")," para um melhor desempenho")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(t.a)({parentName:"li"},{href:"https://blog.rangle.io/react-and-redux-performance-with-reselect/"}),"Melhorando o desempenho de React e Redux com Reselect")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(t.a)({parentName:"li"},{href:"https://github.com/markerikson/react-redux-links/blob/master/react-performance.md#immutable-data"}),"Immutable data performance links"))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Perguntas&Respostas")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(t.a)({parentName:"li"},{href:"https://redux.js.org/faq/react-redux/#why-is-my-component-re-rendering-too-often"}),"Por que meu componente \xe9 rerenderizado com muita frequ\xeancia?")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(t.a)({parentName:"li"},{href:"https://redux.js.org/faq/react-redux/#why-isnt-my-component-re-rendering-or-my-mapstatetoprops-running"}),"Por que meu componente n\xe3o est\xe1 sendo renderizado novamente ou meu mapStateToProps em execu\xe7\xe3o")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(t.a)({parentName:"li"},{href:"https://redux.js.org/faq/react-redux/#how-can-i-speed-up-my-mapstatetoprops"}),"Como posso acelerar meu mapStateToProps?")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(t.a)({parentName:"li"},{href:"https://redux.js.org/faq/react-redux/#should-i-only-connect-my-top-component-or-can-i-connect-multiple-components-in-my-tree"}),"Devo conectar apenas meu componente superior ou posso conectar v\xe1rios componentes em minha \xe1rvore?"))))}m.isMDXComponent=!0}}]);